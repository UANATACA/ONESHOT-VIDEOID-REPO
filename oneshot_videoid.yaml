openapi: 3.0.1
info:
  title: UANATACA ONE-SHOT SIGNATURE API DOCUMENTATION
  description: 
    $ref: ./oneshot_videoid_gui.md
  version: v1
  x-logo:
    url: https://raw.githubusercontent.com/UANATACA/ONESHOT-VIDEOID-REPO/main/img/oneshot_logo.png
    altText: Oneshot logo
servers:
- url: https://one-shot.developers.uanataca.com
tags:
- name: Settings
  description: ' 
    <html> 
      
      Configure Settings to modify default parameters on settings.ini file. Check <a href=''#section/Configuration/Service-settings''>Service Settings</a> section. 
      
      <table> 
        <tr> 
          <th>Method</th><th>Endpoint</th><th>Action</th> 
        </tr> 
        <tr>
          <td>GET</td><td><a href=''#tag/Settings/paths/~1api~1v1~1hello/get''>/hello</a></td><td>Checks for server UP status</td> 
        </tr> 
        <tr> 
          <td>POST</td><td><a href=''#tag/Settings/paths/~1api~1v1~1settings/post''>/settings</a></td><td>Update Settings</td> 
        </tr> 
        <tr> 
          <td>GET</td><td><a href=''#tag/Settings/paths/~1api~1v1~1settings/get''>/settings</a></td><td>Get Settings</td> 
        </tr> 
        <tr> 
          <td>GET</td><td><a href=''#tag/Settings/paths/~1api~1v1~1version/get''>/version</a></td><td>Retrieve Optimizer version</td> 
        </tr> 
      </table>

    </html>
    '
- name: Metadata
  description: "
    <html> 
    
      Metadata can be prepared to be added as part of the One-Shot Signature. </br></br> 
      
      <blockquote style='background-color: #faf3ac; border-color: #5a5a5a; color: #3b3b3b;'> <b>To inspect Metadata from a signed file, please download our Metadata extraction tool available <a href='https://cdn.bit4id.com/es/uanataca/public/tools/metadata_extractor_tool_2.zip'> here</a>. </br> 
      Execute /bin/metadataextractor.exe.</b></blockquote> 
      
      <table>
        <tr> 
          <th>Method</th><th>Endpoint</th><th>Action</th> 
        </tr> 
        <tr> 
          <td>POST</td><td><a href='#tag/Metadata/paths/~1api~1v1~1metadata/post'>/metadata</a></td><td>Upload Metadata</td> 
        </tr> 
        <tr> 
          <td>GET</td><td><a href='#tag/Metadata/paths/~1api~1v1~1metadata/get'>/settings</a></td><td>List Metadata</td> 
        </tr> 
        <tr> 
          <td>DELETE</td><td><a href='#tag/Metadata/paths/~1api~1v1~1metadata/delete'>/version</a></td><td>Delete Metadata</td> 
        </tr> 
        <tr> 
          <td>GET</td><td><a href='#tag/Metadata/paths/~1api~1v1~1metadata~1{metadata_uid}/get'>/settings</a></td><td>Get Metadata</td> 
        </tr> 
        <tr> 
          <td>DELETE</td><td><a href='#tag/Metadata/paths/~1api~1v1~1metadata~1{metadata_uid}/delete'>/version</a></td><td>Delete All Metadata</td> 
        </tr> 
      </table> 
    
    </html> 
    "
- name: Tokens
  description: "
    <html>

      A token is a string that can be used in place of the Registration Authority Officer (RAO) credentials.</br> 
      
      <table> 
        <tr>
          <th>Method</th><th>Endpoint</th><th>Action</th>
        </tr> 
        <tr> 
          <td>POST</td><td><a href='#tag/Tokens/paths/~1api~1v1~1token/post'>/token</a></td><td>Create a new token</td> 
        </tr> 
        <tr> 
          <td>GET</td><td><a href='#tag/Tokens/paths/~1api~1v1~1token~1{uid}/get'>/token/{pk}</a></td><td>Retrieve a token</td>
        </tr> 
        <tr> 
          <td>DELETE</td><td><a href='#tag/Tokens/paths/~1api~1v1~1token~1{uid}/delete'>/token/{uid}</a></td><td>Delete a token</td> 
        </tr> 
        <tr> 
          <td>GET</td><td><a href='#tag/Tokens/paths/~1api~1v1~1tokens/get'>/tokens</a></td><td>List all available tokens</td> 
        </tr> 
      </table> 
    
    </html> 
    "
- name: Requests
  description: "
    <html> 
      A digital signature request contains user identification data and associated documents to be signed.</br> 
    
      <table> 
        <tr> 
          <th>Method</th><th>Endpoint</th><th>Action</th>
        </tr> 
        <tr> 
          <td>POST</td><td><a href='#tag/Requests/paths/~1api~1v1~1request/post'>/request</a></td><td>Create a new request</td> 
        </tr> 
        <tr> 
          <td>GET</td><td><a href='#tag/Requests/paths/~1api~1v1~1request~1{request_pk}/get'>/request/{pk}</a></td><td>Retrieve a new request</td> 
        </tr> 
        <tr> 
          <td>POST</td><td><a href='#tag/Requests/paths/~1api~1v1~1otp~1{pk}/post'>/otp/{pk}</a></td><td>Generate a new OTP</td> 
        </tr> 
        <tr> 
          <td>POST</td><td><a href='#tag/Requests/paths/~1api~1v1~1sign~1{pk}/post'>/sign/{pk}</a></td><td>Start the signature process</td> 
        </tr> 
      </table> 
      
    </html> 
    "
- name: Documents
  description: "
    <html> 
      Manage documents associated to a signature request.</br>
      
      <table> 
        <tr> 
          <th>Method</th><th>Endpoint</th><th>Action</th> 
        </tr> 
        <tr> 
          <td>POST</td><td><a href='#tag/Documents/paths/~1api~1v1~1document~1{pk}/post'>/document/{pk}</a></td><td>Upload a document to be signed</td> 
        </tr> 
        <tr> 
          <td>GET</td><td><a href='#tag/Documents/paths/~1api~1v1~1document~1{pk}~1{type}~1{uid}/get'>/document/{pk}/{type}/{uid}</a></td><td>Retrieve a document</td> 
        </tr> 
        <tr> 
          <td>DELETE</td><td><a href='#tag/Documents/paths/~1api~1v1~1document~1{pk}~1{type}~1{uid}/delete'>/document/{pk}/{type}/{uid}</a></td><td>Delete a document</td> 
        </tr> 
        <tr> 
          <td>GET</td><td><a href='#tag/Documents/paths/~1api~1v1~1documents~1{pk}/get'>/documents/{pk}</a></td><td>List all request associated documents</td> 
        </tr> 
        <tr> 
          <td>DELETE</td><td><a href='#tag/Documents/paths/~1api~1v1~1documents~1{pk}/delete'>/documents/{pk}</a></td><td>Delete all request associated documents</td> 
        </tr> 
        <tr> 
          <td>GET</td><td><a href='#tag/Documents/paths/~1api~1v1~1document~1{pk}~1contract/get'>/document/{pk}/contract</a></td><td>Retrieve the service contract</td> 
        </tr> 
      </table> 
      
    </html> 
    "
- name: Images
  description: "
    <html> 
      Manage images associated to a visual graphic signature placed in the signed document.</br> 
      
      <table> 
        <tr> 
          <th>Method</th><th>Endpoint</th><th>Action</th>
        </tr> 
        <tr> 
          <td>POST</td><td><a href='#tag/Images/paths/~1api~1v1~1image/post'>/image</a></td><td>Upload a new image</td> 
        </tr> 
        <tr> 
          <td>GET</td><td><a href='#tag/Images/paths/~1api~1v1~1image~1{uid}/get'>/image/{uid}</a></td><td>Retrieve an image</td> 
        </tr> 
        <tr> 
          <td>DELETE</td><td><a href='#tag/Images/paths/~1api~1v1~1image~1{uid}/delete'>/image/{uid}</a></td><td>Delete an image</td> 
        </tr> 
        <tr> 
          <td>GET</td><td><a href='#tag/Images/paths/~1api~1v1~1images/get'>/images</a></td><td>List all uploaded images</td> 
        </tr> 
        <tr> 
          <td>DELETE</td><td><a href='#tag/Images/paths/~1api~1v1~1images/delete'>/images</a></td><td>Delete all uploaded images</td>
        </tr>
      </table> 
    
    </html>
    "
- name: Video ID
  description: "
    <html> 
      This allows the management of One-Shot signature by establishing a video call for identity verification.</br> 
    
      <table> 
        <tr> 
          <th>Method</th><th>Endpoint</th><th>Action</th>
        </tr> 
        <tr> 
          <td>POST</td><td><a href='#tag/Video-ID/paths/~1api~1v1~1videoid/post'>/videoid</a></td><td>Create Video ID Request</td> 
        </tr> 
        <tr> 
          <td>POST</td><td><a href='#tag/Video-ID/paths/~1api~1v1~1videoid~1{request_pk}~1evidences/post'>/videoid/{request_pk}/evidences</a></td><td>Upload Data Evidences</td> 
        </tr> 
        <tr> 
          <td>POST</td><td><a href='#tag/Video-ID/paths/~1api~1v1~1videoid~1{request_pk}~1evidences~1video/post'>/videoid/{request_pk}/evidences/video</a></td><td>Upload Video</td> 
        </tr> 
        <tr> 
          <td>PUT</td><td><a href='#tag/Video-ID/paths/~1api~1v1~1request~1{request_pk}/put'>/request/{request_pk}</a></td><td>Update Request</td> 
        </tr> 
        <tr> 
          <td>DELETE</td><td><a href='#tag/Video-ID/paths/~1api~1v1~1request~1{request_pk}/delete'>/request/{request_pk}</a></td><td>Cancel Request</td> 
        </tr> 
        <tr> 
          <td>POST</td><td><a href='#tag/Video-ID/paths/~1api~1v1~1videoid~1{request_pk}~1validate/post'>/videoid/{request_pk}/validate</a></td><td>Validate Request</td> 
        </tr> 
        <tr> 
          <td>POST</td><td><a href='#tag/Video-ID/paths/~1api~1v1~1videoid~1{request_pk}~1refuse/post'>/videoid/{request_pk}/refuse</a></td><td>Refuse Request</td> 
        </tr> 
        <tr> 
          <td>POST</td><td><a href='#tag/Video-ID/paths/~1api~1v1~1requests~1{request_pk}~1approve/post'>/request/{request_pk}/approve</a></td><td>Approve Request</td> 
        </tr> 
        <tr> 
          <td>GET</td><td><a href='#tag/Video-ID/paths/~1api~1v1~1videoid~1{request_pk}~1download~1video/get'>/download/video/{video_identifier}</a></td><td>Download Video</td> 
        </tr> 
      </table> 
    
    </html>
    "
paths:
  /api/v1/hello:
    get:
      tags:
      - Settings
      summary: HELLO
      description: Checks if server is UP.
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status code
                  details:
                    type: string
                    description: The response status message
              example:
                status: 200 OK
                details: Hello
  /api/v1/settings:
    get:
      tags:
      - Settings
      summary: GET SETTINGS
      description: Retrieves the content of the settings.ini file.
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status code
                  details:
                    type: object
                    properties:
                      tsa:
                        type: object
                        properties:
                          tsa_url:
                            type: string
                            description: The default Timestamp Authority URL
                        description: Timestamp Authority Settings
                      request:
                        type: object
                        properties:
                          default_profile:
                            type: string
                            description: The default certificate profile
                          default_ra:
                            type: string
                            description: The default registration Authority id
                        description: Request Settings
                      billing:
                        type: object
                        properties:
                          billing_username:
                            type: string
                            description: The default Billing username
                          billing_password:
                            type: string
                            description: The default Billing password
                        description: Billing Settings
                      general:
                        type: object
                        properties:
                          environment:
                            type: string
                            description: The API environment (test or prod)
                        description: General Settings
                    description: Miscellaneous API parameter details
              example:
                status: 200 OK
                details:
                  tsa:
                    tsa_url: https://tsa.access.bit4id.org:13035/tsa/test01
                  request:
                    default_profile: PFnubeQAFCiudadano
                    default_ra: "9999"
                  billing:
                    billing_username: user@uanataca.com
                    billing_password: UGVyb2xpdG8xLg==
                  general:
                    environment: test
    post:
      tags:
      - Settings
      summary: UPDATE SETTINGS
      description: Updates configuration parameters present in <a href="#section/Configuration/Service-settings">settings.ini</a>
        file.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SettingsObject'
        required: false
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status code
                  details:
                    type: string
                    description: The response status message
              example:
                status: 200 OK
                details: Settings saved successfully
        400:
          description: Invalid JSON
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
                    description: Invalid JSON
                  description:
                    type: string
                    description: The response error message
              example:
                status: Invalid JSON
                details: Could not parse JSON body - Invalid control character at line 4 column 24 (char 82)
      x-codeSamples:
      - lang: curl
        source: |
          curl -i -X POST \
            https://one-shot.developers.uanataca.com/api/v1/settings \
            -H 'Content-Type: application/json' \
            -d '{
              "tsa": {
                "tsa_url": "https://tsa.access.bit4id.org:13035/tsa/test01"
              },
              "request": {
                "default_profile": "PFnubeQAFCiudadano",
                "default_ra": "1000"
              },
              "billing": {
                "billing_username": "user@uanataca.com",
                "billing_password": "ejVxTnFrZkI="
              },
              "general": {
                "environment": "test"
              }
            }'
      - lang: Python
        source: |
          import requests

          url = "https://one-shot.developers.uanataca.com/api/v1/settings"

          payload = {
            "tsa": {
              "tsa_url": "https://tsa.access.bit4id.org:13035/tsa/test01"
            },
            "request": {
              "default_profile": "PFnubeQAFCiudadano",
              "default_ra": "1000"
            },
            "billing": {
              "billing_username": "user@uanataca.com",
              "billing_password": "ejVxTnFrZkI="
            },
            "general": {
              "environment": "test"
            }
          }

          headers = {"Content-Type": "application/json"}

          response = requests.post(url, json=payload, headers=headers)

          data = response.json()
          print(data)
      - lang: Node.js
        source: |
          const fetch = require('node-fetch');

          const resp = await fetch(
            `https://one-shot.developers.uanataca.com/api/v1/settings`,
            {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                tsa: {tsa_url: 'https://tsa.access.bit4id.org:13035/tsa/test01'},
                request: {
                  default_profile: 'PFnubeQAFCiudadano',
                  default_ra: '1000'
                },
                billing: {
                  billing_username: 'user@uanataca.com',
                  billing_password: 'ejVxTnFrZkI='
                },
                general: {environment: 'test'}
              })
            }
          );

          const data = await resp.json();
          console.log(data);
      - lang: C#
        source: |
          using System;
          using System.Net.Http;
          using System.Threading.Tasks;
          using System.Text;
          using Newtonsoft.Json.Linq;

          public class Program
          {
            public static async Task Main(string[] args)
            {
              using (var client = new HttpClient())
              {
                JObject json = JObject.Parse(@"{
                  tsa: {tsa_url: 'https://tsa.access.bit4id.org:13035/tsa/test01'},
                  request: {
                    default_profile: 'PFnubeQAFCiudadano',
                    default_ra: '1000'
                  },
                  billing: {
                    billing_username: 'user@uanataca.com',
                    billing_password: 'ejVxTnFrZkI='
                  },
                  general: {environment: 'test'}
                }");
                var postData = new StringContent(json.ToString(), Encoding.UTF8, "application/json");
                var request = await client.PostAsync("https://one-shot.developers.uanataca.com/api/v1/settings", postData);
                var response = await request.Content.ReadAsStringAsync();

                Console.WriteLine(response);
              }
            }
          }
      x-codegen-request-body-name: body
  /api/v1/version:
    get:
      tags:
      - Settings
      summary: VERSION
      description: Retrieves the current Optimizer version.
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status code
                  details:
                    type: object
                    properties:
                      info:
                        type: object
                        properties:
                          machine:
                            type: string
                            description: The Optimizer processing technology
                          version:
                            type: string
                            description: Version related information
                          release:
                            type: string
                            description: Release related information
                          hostname:
                            type: string
                            description: Hostname related information
                          system:
                            type: string
                            description: The Optimizer Operative system
                          processor:
                            type: string
                            description: The Optimizer processing technology
                        description: General info about the terminal the Optimizer
                          is installed.
                      version:
                        type: string
                        description: The Optimizer version release date.
                      name:
                        type: string
                        description: One-Shot Optimizer
              example:
                status: 200 OK
                details:
                  info:
                    machine: x86_64
                    version: '#1 SMP Mon Jun 30 12:09:22 UTC 2014'
                    release: 3.10.0-123.el7.x86_64
                    hostname: ip-172-31-5-91
                    system: Linux
                    processor: x86_64
                  version: "20210721"
                  name: OneShot Optimizer
  /api/v1/metadata:
    get:
      tags:
      - Metadata
      summary: LIST METADATA
      description: Lists all metadata objects available.
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status code
                  details:
                    type: object
                    properties:
                      metadata_uid:
                        type: object
                        properties:
                          oid:
                            type: string
                            description: The metadata OID code
                          metadata:
                            type: string
                            description: The metadata information in Base64 format
                    description: The response object containing all uploaded sets
                      of metadata
              example:
                status: 200 OK
                details:
                  78d94fead7844136804afcc87f6a80b5:
                    oid: 1.8.6.7.4.1.47289.100.2.9
                    metadata: |-
                      BTLkEuMRQwEgYDVQQLDAtBQy1VQU5BVEFD
                      QTEgMB4GA1UEAwwXVUFOQVRBQ0EgQ0ExIERFVkVMIDIwMTYxGDAWBgN
                  b77b537e3a6247a49468983d6be39ba8:
                    oid: 1.8.6.7.4.1.47289.100.2.9
                    metadata: |-
                      MIIH0wYJKoZIhvcNAQcDoIIHxDCCB8ACAQAxggHnMIIB4wIBADCByjCBvTELMAkGA1UEBhMCRVMx
                      Y29tL2FkZHJlc
                  fc2ec0d5ffc34ac1bae21e5882d746b4:
                    oid: 1.8.6.7.4.1.47289.100.2.9
                    metadata: bmF2ZWdhZG9yIMOhw6HDocOhw6EKMTIzNAplc3RvIGVzIHVuYSBwcnVlYmE6IGhveSBlcwptYXJ0ZXNzcwp4eXoxMjM0
    post:
      tags:
      - Metadata
      summary: UPLOAD METADATA
      description: Uploads all metadata information previously converted into Base64
        format.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataObject'
        required: false
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status code
                  details:
                    type: object
                    properties:
                      metadata:
                        type: string
                        description: The metadata unique id (uid) to be used in <a href='#tag/Requests/paths/~1api~1v1~1sign~1{pk}/post'>Sign</a>
                          call.
                    description: The response object
              example:
                status: 200 OK
                details:
                  metadata: 78d94fead7844136804afcc87f6a80b5
        400:
          description: Invalid JSON
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
                    description: Invalid JSON
                  description:
                    type: string
                    description: The response error message
              example:
                status: Invalid JSON
                details: Could not parse JSON body - Invalid control character at line 4 column 24 (char 82)
      x-codeSamples:
      - lang: curl
        source: |
          curl -i -X POST \
            https://one-shot.developers.uanataca.com/api/v1/metadata \
            -H 'Content-Type: application/json' \
            -d '{
              "metadata": "bmF2ZWdhZG9yIMOhw6HDocOhw6EKMTIzNAplc3RvIGVzIHVuYSBwcnVlYmE6IGhveSBlcwptYXJ0ZXNzcwp4eXoxMjM0",
              "metadata_oid": "1.8.6.7.4.1.47289.100.2.9"
            }'
      - lang: Python
        source: |
          import requests

          url = "https://one-shot.developers.uanataca.com/api/v1/metadata"

          payload = {
            "metadata": "bmF2ZWdhZG9yIMOhw6HDocOhw6EKMTIzNAplc3RvIGVzIHVuYSBwcnVlYmE6IGhveSBlcwptYXJ0ZXNzcwp4eXoxMjM0",
            "metadata_oid": "1.8.6.7.4.1.47289.100.2.9"
          }

          headers = {"Content-Type": "application/json"}

          response = requests.post(url, json=payload, headers=headers)

          data = response.json()
          print(data)
      - lang: Node.js
        source: |
          const fetch = require('node-fetch');

          const resp = await fetch(
            `https://one-shot.developers.uanataca.com/api/v1/metadata`,
            {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                metadata: 'bmF2ZWdhZG9yIMOhw6HDocOhw6EKMTIzNAplc3RvIGVzIHVuYSBwcnVlYmE6IGhveSBlcwptYXJ0ZXNzcwp4eXoxMjM0',
                metadata_oid: '1.8.6.7.4.1.47289.100.2.9'
              })
            }
          );

          const data = await resp.json();
          console.log(data);
      - lang: C#
        source: |
          using System;
          using System.Net.Http;
          using System.Threading.Tasks;

          public class Program
          {
            public static async Task Main(string[] args)
            {
              using (var client = new HttpClient())
              {
                var request = await client.GetAsync("https://one-shot.developers.uanataca.com/api/v1/hello");
                var response = await request.Content.ReadAsStringAsync();

                Console.WriteLine(response);
              }
            }
          }
      x-codegen-request-body-name: body
    delete:
      tags:
      - Metadata
      summary: DELETE ALL METADATA
      description: Deletes all metadata objects available.
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Successful response code
                  details:
                    type: string
                    description: Successful response message
              example:
                status: 200 OK
                details: All metadata deleted
  /api/v1/metadata/{metadata_uid}:
    get:
      tags:
      - Metadata
      summary: GET METADATA
      description: Retrieves the metadata associated to an specific id.
      parameters:
      - name: metadata_uid
        in: path
        description: The metadata object unique identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status code
                  details:
                    type: object
                    properties:
                      metadata:
                        type: string
                        description: The metadata information in Base64 format.
                    description: The response object containing all uploaded sets
                      of metadata
              example:
                status: 200 OK
                details:
                  oid: 1.8.6.7.4.1.47289.100.2.9
                  metadata: |
                    MIIH0wYJKoZIhvcNAQcDoIIHxDCCB8ACAQAxggHnMIIB4wIBADCByjCBvTELMAkGA1UEBhMCRVMx
                    Y29tL2FkZHJlc3MpMRYwFAYDVQQKDA1VQU5BVEFDQSBTLkEuMRQwEgYDVQQLDAtBQy1VQU5BVEFD
                    QTEgMB4GA1UEAwwXVUFOQVRBQ0EgQ0ExIERFVkVMIDIwMTYxGDAWBgNVBGEMD1ZBVEVTLUE2Njcy
                    MTQ5OQIIb+3gE1KQamEwDQYJKoZIhvcNAQEBBQAEggEAXv/wMtJGwVF3uUuGdFracjx3V/qCXDVO
                    lZR9mtxhYh/sEKw2QWEIDPh8yseqpBbF2lZnYSUrLFaDaP5oXNi+R9Jun87awP2CxLElRG4JY0u5
                    l7DQYg8W5DKMb8s6E062mIR6JTwLSAqU81xZrWMtuQ9ymZfU0Q1/hQSW9D2/hvi1ER5NPvjhwS/+DeX
                    kdGZlTCCBc4GCSqGSIb3DQEHATAdBglghkgBZQMEASoEEORvtPD7Pvq1yXS0CbnQePGAggWgxLgM
                    pqmE7mNzNzmRx0v/qQNEDUlD3UbrNGxWxT7w78xbSxzlhj9dQ5N0wlZnzMDI4z1msCvEU3VuLoJw
                    L53HBgKRArVFndQzgUqFDSFw1zGqCP9VStwt+VzbkqhTvSWEnNj2uMEneQjCXBIysFr3AQFg1o0C
                    rA6ggGgcZ+1+jx2N4IimMLMPUWm19duqHuKHw21U96tj7mHW452Nyh0txDsQa9P+nyfBuehW/RXs
                    ctBnhUE0Uy7lONgyZBYYJtN7CGK+jhh5k/1pz+qqH3e8oBmbghzu7rlbms/5vz8vQOso2atGc7P5
                    ABezqTQYXOp6hli9tCvGV3MpG57e6enIuCqvq0LPmkDmxiH7+LfmuJTUzl/W2oOsrVa5fjqcWIy3
                    F8509Z7h9uT7q/T3/vRiV5b9i7J/hc0ZPHwsF02LPF3D4oM8o3i4K1DdLeVrnGPq+JYpePlxhibY
                    A+cr6QljeJlH9qCO91ogKtcpzWqyxnSGLi9j18KGpfZYQD2aPe+8uSxjlyChMjTu7Kk5KtyT8hNt
                    Q2n6bll3TcpQM9HWAxcWyhq+yGPxnE7Dt2YrHa+YWN3UFDMikbTzq6ceAM/orDpZcjb5NEC0uRa3
                    Xl05fvoK/+ruApkfdZKWtHOQE8g9DIa8lDqnVC39wYIWb
                    suHqzXDwMydJ7vglkehQFESi6c53sMOgXbqdrXyxzIUfwUU0TZidS7Gs7zXiyVNpo1YzCSKnG157
                    a1HkSBiTnU2h+Nt+6A6GxN44v0K1L7IENWEuJ9hLYudRnGpR/VJbIHbMTwFti2Mld1XWNXVrH+YH
                    vj25yzLS2WwqLUFdABtp4bA9CFQPMSqMaQIEr531PYPegQEb8daq1AGmlg4uBkdnOcNIH5ky2JAm
                    ebSdFpzdH++9WYOvYsWlZ/5JqNQKbIU9XoVq+mClYnP80q/1yBFuGVnb9lagi531M2khMmdhkd4S
                    /+bXfy4Jz4WRK5TJpbbJay96QuAQZhpuQeTM4noJSs6tZDLPWV4wCCVhiIvBogdo0wqFj
                    T6pVfgKx9L34JTIByTAYqADbcaRBest8O3kzAutEPNesD/rnkoTaGNjrZe84af8PqFzNGb0eKFcY
                    q0LglqqQNiQYQfftoM2hKmOx2k1OYJeTtJD+l4yChV6DfQbx2BeJgn8cf64LsRkMeOgPm+BwYkaD
                    UqH58affxj9HITMmdaelufH2m3DVZCNJRk+1WsQYkvosEKZNL68N0GKlWb/yDvJLfqtX2uVPBx4e
                    6NtrC1AH/c6GTRrG/zlNtknKVXgN9Yc0dCfF9qcHosNHec7pWSxbV85FRkj+/c5R0OvmfbcD1DjV
                    Gn05/82vOKsBwpsuNxI8p7O/lskYFH6vdmCJ6AxGDT6/tFGi4+jJ41zZqy1BstUooIMyJNznD1QZ
                    kp8SBUXram6G2fuWPXFaSz00iTbVpbjMbEOqnTAAREtBCNPBBixjnopEswk9P/t3APYDKEaCpOgW
                    Zt1ebP4rQYQA5ypDpEL82ZEx09zIovnu4w0S0fz4aIAtEbVI2zVUedv0rjc090mpoYzfwJBn4MaA
                    UkcBlLfYQ3eXj4TLEuYYGBzrOCGsUC//M9Qstt1ryIhsVrooa6HsvO92MwbYKKmP2laAJNIziPYN
                    mGItRIKNwB6BNMGb
        404:
          description: Invalid metadata uid
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status id
                  details:
                    type: string
                    description: The response error message
              example:
                status: 404 Not Found
                details: Metadata not found on disk
      x-codeSamples:
      - lang: curl
        source: |
          curl -i -X GET https://one-shot.developers.uanataca.com/api/v1/metadata/1b8eac803b75418e8e1a9cad0e342949
      - lang: Python
        source: |
          import requests

          url = "https://one-shot.developers.uanataca.com/api/v1/metadata/1b8eac803b75418e8e1a9cad0e342949"

          response = requests.get(url)

          data = response.json()
          print(data)
      - lang: Node.js
        source: |
          const fetch = require('node-fetch');

          const resp = await fetch(
            `https://one-shot.developers.uanataca.com/api/v1/metadata/1b8eac803b75418e8e1a9cad0e342949`,
            {method: 'GET'}
          );

          const data = await resp.text();
          console.log(data);
      - lang: C#
        source: |
          using System;
          using System.Net.Http;
          using System.Threading.Tasks;

          public class Program
          {
            public static async Task Main(string[] args)
            {
              using (var client = new HttpClient())
              {
                var request = await client.GetAsync("https://one-shot.developers.uanataca.com/api/v1/metadata/1b8eac803b75418e8e1a9cad0e342949");
                var response = await request.Content.ReadAsStringAsync();

                Console.WriteLine(response);
              }
            }
          }
    delete:
      tags:
      - Metadata
      summary: DELETE METADATA
      description: Deletes the metadata associated to an specific id.
      parameters:
      - name: metadata_uid
        in: path
        description: The metadata object unique identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Successful response code
                  details:
                    type: object
                    properties: {}
                    description: Successful response message
              example:
                status: 200 OK
                details: Metadata successfully deleted
        404:
          description: Invalid metadata uid
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status id
                  details:
                    type: string
                    description: The response error message
              example:
                status: 404 Not Found
                details: Metadata not found on disk
      x-codeSamples:
      - lang: curl
        source: |
          curl -i -X DELETE https://one-shot.developers.uanataca.com/api/v1/metadata/1b8eac803b75418e8e1a9cad0e342949
      - lang: Python
        source: |
          import requests

          url = "https://one-shot.developers.uanataca.com/api/v1/metadata/1b8eac803b75418e8e1a9cad0e342949"

          response = requests.delete(url)

          data = response.json()
          print(data)
      - lang: Node.js
        source: |
          const fetch = require('node-fetch');

          const resp = await fetch(
            `https://one-shot.developers.uanataca.com/api/v1/metadata/1b8eac803b75418e8e1a9cad0e342949`,
            {method: 'DELETE'}
          );

          const data = await resp.text();
          console.log(data);
      - lang: C#
        source: |
          using System;
          using System.Net.Http;
          using System.Threading.Tasks;

          public class Program
          {
            public static async Task Main(string[] args)
            {
              using (var client = new HttpClient())
              {
                var request = await client.DeleteAsync("https://one-shot.developers.uanataca.com/api/v1/metadata/1b8eac803b75418e8e1a9cad0e342949");
                var response = await request.Content.ReadAsStringAsync();

                Console.WriteLine(response);
              }
            }
          }
  /api/v1/token:
    post:
      tags:
      - Tokens
      summary: CREATE TOKEN
      description: Creates a new token that contains the Registration Authority Officer
        (RAO) credentials.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObject'
        required: false
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status id
                  details:
                    type: string
                    description: the created token number
              example:
                status: 200 OK
                details: a44765ab8ca04e429a565f02d22179a0
        400:
          description: Invalid JSON | Token already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
                    description: Invalid JSON
                  description:
                    type: string
                    description: The response error message
              example:
                status: 400 Bad Request
                details: A token with these credentials already exist!
        404:
          description: Invalid username
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status id
                  details:
                    type: string
                    description: The response error message
              example:
                status: 404 Not Found
                details: Error getting RAO's id. Make sure the credentials are correct.
      x-codeSamples:
      - lang: curl
        source: |
          curl -i -X POST \
            https://one-shot.developers.uanataca.com/api/v1/token \
            -H 'Content-Type: application/json' \
            -d '{
              "username": "9001800",
              "password": "Gy6F89xK",
              "pin": "belorado74",
              "env": "test"
            }'
      - lang: Python
        source: |
          import requests

          url = "https://one-shot.developers.uanataca.com/api/v1/token"

          payload = {
              "username": "1234567",
              "password": "Gy6F37xK",
              "pin": "belorado74",
              "env": "test"
          }

          headers = {"Content-Type": "application/json"}

          response = requests.post(url, json=payload, headers=headers)

          data = response.json()
          print(data)
      - lang: Node.js
        source: |
          const fetch = require('node-fetch');

          const resp = await fetch(
            'https://one-shot.developers.uanataca.com/api/v1/token',
            {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                'username': '9001800',
                'password': 'Gy6F89xK',
                'pin': 'belorado74',
                'env': 'test'
              })
            }
          );

          const data = await resp.json();
          console.log(data);
      - lang: C#
        source: |
          using System;
          using System.Net.Http;
          using System.Threading.Tasks;
          using System.Text;
          using Newtonsoft.Json.Linq;

          public class Program
          {
            public static async Task Main(string[] args)
            {
              using (var client = new HttpClient())
              {
                JObject json = JObject.Parse(@"{
                  'username': '9001800',
                  'password': 'Gy6F89xK',
                  'pin': 'belorado74',
                  'env': 'test'
                }");
                var postData = new StringContent(json.ToString(), Encoding.UTF8, "application/json");
                var request = await client.PostAsync("https://one-shot.developers.uanataca.com/api/v1/token", postData);
                var response = await request.Content.ReadAsStringAsync();

                Console.WriteLine(response);
              }
            }
          }       
      x-codegen-request-body-name: body
  /api/v1/token/{uid}:
    get:
      tags:
      - Tokens
      summary: GET TOKEN
      description: Retrieves the token associated credentials with the given unique identifier.<br> The response gets a `true` or `false` value regarding if password and PIN parameters are associated to the token.
      parameters:
      - name: uid
        in: path
        description: The token unique identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status id
                  details:
                    type: object
                    properties:
                      username:
                        type: string
                        description: The RAO's username
                      password:
                        type: boolean
                        description: The RAO's token associated password condition
                          (true or false)
                      pin:
                        type: boolean
                        description: The RAO's token associated pin condition (true
                          or false)
                    description: A JSON object with the user credentials
              example:
                status: 200 OK
                details:
                  username: "9001800"
                  password: true
                  pin: true
        404:
          description: '`uid` not found'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status id
                  details:
                    type: string
                    description: The response error message
              example:
                status: 404 Not Found
                details: Token not found
      x-codeSamples:
      - lang: curl
        source: "curl -i -X GET \\ \n  https://one-shot.developers.uanataca.com/api/v1/token/a44765ab8ca04e429a565f02d22179a0\n"
      - lang: Python
        source: |
          import requests

          url = "https://one-shot.developers.uanataca.com/api/v1/token/a44765ab8ca04e429a565f02d22179a0"

          response = requests.get(url)

          data = response.json()
          print(data)
      - lang: Node.js
        source: |
          const fetch = require('node-fetch');

          const resp = await fetch(
            'https://one-shot.developers.uanataca.com/api/v1/token/a44765ab8ca04e429a565f02d22179a0',
            {method: 'GET'}
          );

          const data = await resp.text();
          console.log(data);
      - lang: C#
        source: | 
          using System;
          using System.Net.Http;
          using System.Threading.Tasks;

          public class Program
          {
            public static async Task Main(string[] args)
            {
              using (var client = new HttpClient())
              {
                var request = await client.GetAsync("https://one-shot.developers.uanataca.com/api/v1/token/a44765ab8ca04e429a565f02d22179a0");
                var response = await request.Content.ReadAsStringAsync();

                Console.WriteLine(response);
              }
            }
          }       
    delete:
      tags:
      - Tokens
      summary: DELETE TOKEN
      description: Deletes the token with the specified unique identifier.
      parameters:
      - name: uid
        in: path
        description: The token unique identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status id
                  details:
                    type: string
                    description: Successful token deletion confirmation message
              example:
                status: 200 OK
                details: Token deleted successfully
        404:
          description: '`uid` not found'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status id
                  details:
                    type: string
                    description: The response error message
              example:
                status: 404 Not Found
                details: Token not found
      x-codeSamples:
      - lang: curl
        source: |
          curl -i -X DELETE \
            https://one-shot.developers.uanataca.com/api/v1/token/a44765ab8ca04e429a565f02d22179a0
      - lang: Python
        source: |
          import requests

          url = "https://one-shot.developers.uanataca.com/api/v1/token/a44765ab8ca04e429a565f02d22179a0"

          response = requests.delete(url)

          data = response.json()
          print(data)
      - lang: Node.js
        source: |
          const fetch = require('node-fetch');

          const resp = await fetch(
            'https://one-shot.developers.uanataca.com/api/v1/token/a44765ab8ca04e429a565f02d22179a0',
            {method: 'DELETE'}
          );

          const data = await resp.text();
          console.log(data);
      - lang: C#
        source: |
          using System;
          using System.Net.Http;
          using System.Threading.Tasks;

          public class Program
          {
            public static async Task Main(string[] args)
            {
              using (var client = new HttpClient())
              {
                var request = await client.DeleteAsync("https://one-shot.developers.uanataca.com/api/v1/token/a44765ab8ca04e429a565f02d22179a0");
                var response = await request.Content.ReadAsStringAsync();

                Console.WriteLine(response);
              }
            }
          } 
  /api/v1/tokens:
    get:
      tags:
      - Tokens
      summary: LIST TOKENS
      description: Returns a list of all tokens available and their associated data.
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status id
                  details:
                    type: object
                    properties:
                      tokenid:
                        type: object
                        properties:
                          username:
                            type: string
                            description: The RAO's username
                          password:
                            type: string
                            description: The RAO's password
                          pin:
                            type: string
                            description: The RAO's pin
                        description: The token id
                    description: A JSON object with the token id and the user credentials
              example:
                status: 200 OK
                details:
                  6d1cae4d55be4cdf9cac50ee36f73406:
                    username: "9001800"
                    password: true
                    pin: true
                  2edfa0ff321b6cf09174e1326c40e174:
                    username: "9001800"
                    password: true
                    pin: false
      x-codeSamples:
      - lang: curl
        source: |
          curl -i -X GET \
            https://one-shot.developers.uanataca.com/api/v1/tokens
      - lang: Python
        source: |
          import requests

          url = "https://one-shot.developers.uanataca.com/api/v1/tokens"

          response = requests.get(url)

          data = response.json()
          print(data)
      - lang: Node.js
        source: |
          const fetch = require('node-fetch');

          const resp = await fetch(
            'https://one-shot.developers.uanataca.com/api/v1/tokens',
            {method: 'GET'}
          );

          const data = await resp.text();
          console.log(data);
      - lang: C#
        source: |
          using System;
          using System.Net.Http;
          using System.Threading.Tasks;

          public class Program
          {
            public static async Task Main(string[] args)
            {
              using (var client = new HttpClient())
              {
                var request = await client.GetAsync("https://one-shot.developers.uanataca.com/api/v1/tokens");
                var response = await request.Content.ReadAsStringAsync();

                Console.WriteLine(response);
              }
            }
          }
  /api/v1/request:
    post:
      tags:
      - Requests
      summary: CREATE REQUEST
      description: Creates a new digital signature request for the user identified.
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - billing_password
              - billing_username
              - email
              - env
              - given_name
              - mobile_phone_number
              - password
              - pin
              - profile
              - registration_authority
              - serial_number
              - surname_1
              - token
              - username
              type: object
              properties:
                given_name:
                  type: string
                  description: The user's given name
                surname_1:
                  type: string
                  description: The user's first surname
                surname_2:
                  type: string
                  description: The user's second surname
                id_document_type:
                  type: string
                  description: |
                    Document types allowed for the user identification:
                     * **IDC** - Identification based on national identity card number. **Default when this field is not specified.**
                     * **PAS** - Identification based on passport number
                     * **PNO** - Identification based on national personal number (national civic registration number)
                     * **TIN** - Tax Identification Number according to the European Commission
                  enum:
                  - IDC
                  - PAS
                  - PNO
                  - TIN
                id_document_country:
                  type: string
                  description: The user's id document country two-letters code (ISO
                    3166-1 alpha-2). **Default "ES" if field is not included.**
                serial_number:
                  type: string
                  description: User's id document serial number
                email:
                  type: string
                  description: The user's email
                mobile_phone_number:
                  type: string
                  description: The user's mobile phone number including the international
                    prefix
                registration_authority:
                  type: string
                  description: 'The Registration Authority id number.</br> <blockquote
                    style=''background-color: #faf3ac; border-color: #5a5a5a; color:
                    #3b3b3b;''><b>⚠ Required only if not set at settings.ini file.
                    Check <a href=''#tag/Settings/paths/~1api~1v1~1settings/post''>Update
                    Settings</a> call.</b></blockquote>'
                profile:
                  type: string
                  description: ' Digital certificate profiles allowed:</br> * **PFnubeQAFCiudadano**
                    - Uanataca''s eIDAS qualified digital certificate used for qualified
                    signature in the European Union </br> * **PFnubeNC** - Uanataca''s
                    normalized digital certificate used for advanced signature </br>
                    <blockquote style=''background-color: #faf3ac; border-color: #5a5a5a;
                    color: #3b3b3b;''><b>⚠ Required only if not set at settings.ini
                    file. Check <a href=''#tag/Settings/paths/~1api~1v1~1settings/post''>Update
                    Settings</a> call.</b></blockquote>'
                  enum:
                  - PFnubeQAFCiudadano
                  - PFnubeNC
                token:
                  type: string
                  description: 'The Registration Authority Officer (RAO)''s token
                    unique id containing RAO''s digital identity credentials. </br>
                    <blockquote style=''background-color: #faf3ac; border-color: #5a5a5a;
                    color: #3b3b3b;''><b>⚠ Not required when RAO''s credentials (username,
                    password, pin) are included as fields in this call.</b></blockquote>'
                username:
                  type: string
                  description: 'The RAO''s digital identity username. </br> <blockquote
                    style=''background-color: #faf3ac; border-color: #5a5a5a; color:
                    #3b3b3b;''><b>⚠ Not required when included in <a href=''#tag/Tokens/paths/~1api~1v1~1token/post''>token</a>.</b></blockquote>'
                password:
                  type: string
                  description: 'The RAO''s digital identity password. </br> <blockquote
                    style=''background-color: #faf3ac; border-color: #5a5a5a; color:
                    #3b3b3b;''><b>⚠ Not required when included in <a href=''#tag/Tokens/paths/~1api~1v1~1token/post''>token</a>.</b></blockquote>'
                pin:
                  type: string
                  description: 'The RAO''s digital identity PIN.</br> <blockquote
                    style=''background-color: #faf3ac; border-color: #5a5a5a; color:
                    #3b3b3b;''><b>⚠ Not required when included in <a href=''#tag/Tokens/paths/~1api~1v1~1token/post''>token</a>.</b></blockquote>'
                document_front:
                  description: Front side image of the user's identification document (JPEG or PNG).
                  type: string
                  format: binary
                document_rear:
                  description: Rear side image of the user's identification document (JPEG or PNG)
                  type: string
                  format: binary
                document_owner:
                  description: A selfie image of the user holding the identifying document below his/her chin (JPEG or PNG)
                  type: string
                  format: binary
                extra_document:
                  description: An extra document to upload.
                  type: string
                  format: binary
                env:
                  type: string
                  description: 'The API work environment. </br> <blockquote style=''background-color:
                    #faf3ac; border-color: #5a5a5a; color: #3b3b3b;''><b>⚠ Required
                    only if not set at settings.ini file. Check <a href=''#tag/Settings/paths/~1api~1v1~1settings/post''>Update
                    Settings</a> call.</b></blockquote>'
                  enum:
                  - test
                  - prod
                billing_username:
                  type: string
                  description: 'The client billing username. </br> <blockquote style=''background-color:
                    #faf3ac; border-color: #5a5a5a; color: #3b3b3b;''><b>⚠ Required
                    only if not set at settings.ini file. Check <a href=''#tag/Settings/paths/~1api~1v1~1settings/post''>Update
                    Settings</a> call.</b></blockquote>'
                billing_password:
                  type: string
                  description: 'The client billing password in Base64 format. </br>
                    <blockquote style=''background-color: #faf3ac; border-color: #5a5a5a;
                    color: #3b3b3b;''><b>⚠ Required only if not set at settings.ini
                    file. Check <a href=''#tag/Settings/paths/~1api~1v1~1settings/post''>Update
                    Settings</a> call.</b></blockquote>'
                useasync:
                  type: boolean
                  description: This parameter enables the One-Shot asynchronous workflow. When set to true, the `callback` parameter can be set by specifying a Webhook URL.
                callback:
                  type: string
                  description: The Webhook URL for the asynchronous service. 
        required: true
      responses:
        201:
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status id
                  details:
                    type: number
                    description: The created request pk
              example:
                status: 201 Created
                details: 29571
        400:
          description: Missing username/password/pin | Invalid profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status id
                  details:
                    type: string
                    description: The response error message
              example:
                status: 400 Bad Request
                details: 'Missing parameter: mobile_phone_number required'
        403:
          description: Invalid username | password | PIN  | registration authority
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status id
                  details:
                    type: string
                    description: The response error message
              example:
                status: 403 Forbidden
                details: Invalid RAO credentials
        404:
          description: Invalid username/password/pin
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status id
                  details:
                    type: string
                    description: The response error message
              example:
                status: "404 Not Found"
                details: "Error getting RAO's id. Make sure the credentials are correct"
        412:
          description: Missing parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status id
                  details:
                    type: string
                    description: The response error message
              example:
                status: 412 Precondition Failed
                details: 'Error occured during request approval: Invalid request fields:
                  given_name'
        500:
          description: Invalid environment | Invalid registration authority | Invalid
            certificates | Invalid billing credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status id
                  details:
                    type: string
                    description: The response error message
              example:
                status: 500 Internal Server Error
                details: 'Configuration error: Please check the certificates path
                  for the environment selected'
      x-codeSamples:
      - lang: curl
        source: |
          curl -i -X POST \
            https://one-shot.developers.uanataca.com/api/v1/request \
            -H 'Content-Type: multipart/form-data' \
            -F given_name=John \
            -F surname_1=Smith \
            -F surname_2=Lopez \
            -F id_document_type=IDC \
            -F id_document_country=ES \
            -F serial_number=12345678A \
            -F email=john_smithlop@uanataca.com \
            -F mobile_phone_number=+34999999999 \
            -F registration_authority=124 \
            -F profile=PFnubeQAFCiudadano \
            -F token=a44765ab8ca04e429a565f02d22179a0 \
            -F username=9001800 \
            -F password=Gy6F89xK \
            -F pin=belorado74 \
            -F document_front=@sample_folder/img_front.png \
            -F document_rear=@sample_folder/img_rear.png \
            -F document_owner=@sample_folder/img_owner.png \
            -F env=test \
            -F billing_username=user@uanataca.com \
            -F billing_password=ejVxTnFrZkI= \
      - lang: Python
        source: |
          import requests

          url = "https://one-shot.developers.uanataca.com/api/v1/request"

          payload={'given_name': 'John',
          'surname_1': 'Smith',
          'surname_2': 'Lopez',
          'id_document_type': 'IDC',
          'id_document_country': 'ES',
          'serial_number': '12345678A',
          'email': 'john_smithlop@uanataca.com',
          'mobile_phone_number': '+34999999999',
          'registration_authority': '124',
          'profile': 'PFnubeQAFCiudadano',
          'token': '6d1cae4d55be4cdf9cac50ee36f73406',
          'username': '9001800',
          'password': 'Gy6F89xK',
          'pin': 'belorado74',
          'env': 'test',
          'billing_username': 'user@uanataca.com',
          'billing_password': 'ejVxTnFrZkI='}
          files=[
            ('document_front',('file',open('sample_folder/img_front.png','rb'),'image/png')),
            ('document_rear',('file',open('sample_folder/img_rear.png','rb'),'image/png')),
            ('document_owner',('file',open('sample_folder/img_owner.png','rb'),'image/png'))
          ]
          headers = {
            'Content-Type': 'application/json'
          }

          response = requests.request("POST", url, headers=headers, data=payload, files=files)

          print(response.text)
      - lang: Node.js
        source: |
          import fetch from "node-fetch";
          import FormData from "form-data";
          import fs from "fs";

          var formData = new FormData();

          formData.append('given_name', 'John');
          formData.append('surname_1', 'Smith');
          formData.append('surname_2', 'Lopez');
          formData.append('id_document_type', 'IDC');
          formData.append('id_document_country', 'ES');
          formData.append('serial_number', '12345678A');
          formData.append('email', 'john_smithlop@uanataca.com');
          formData.append('mobile_phone_number', '+34999999999');
          formData.append('registration_authority', '124');
          formData.append('profile', 'PFnubeQAFCiudadano');
          formData.append('token', '6d1cae4d55be4cdf9cac50ee36f73406');
          formData.append('username', '9001800');
          formData.append('password', 'Gy6F89xK');
          formData.append('pin', 'belorado74');
          formData.append('document_front', fs.createReadStream('sample_folder/img_front.png'));
          formData.append('document_rear', fs.createReadStream('sample_folder/img_rear.png'));
          formData.append('document_owner', fs.createReadStream('sample_folder/img_owner.png'));
          formdata.append("env", "test");
          formdata.append("billing_username", "user@uanataca.com");
          formdata.append("billing_password", "ejVxTnFrZkI=");

          var url = 'https://one-shot.developers.uanataca.com/api/v1/request';

          var options = {
            method: 'POST',
            body: formData,
            redirect: 'follow'
          };

          options.body = formData;

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: 'C#'
        source: |
                using System;
                using System.Threading.Tasks;
                using RestSharp;

                public class Program
                {
                  public static Task Main(string[] args)
                    {
                        var client = new RestClient("https://one-shot.developers.uanataca.com/api/v1/request");
                        client.Timeout = -1;

                        var request = new RestRequest(Method.POST);
                        request.AlwaysMultipartFormData = true;
                        request.AddHeader("content-type", "multipart/form-data");
                        request.AddParameter("given_name", "John");
                        request.AddParameter("surname_1", "Smith");
                        request.AddParameter("surname_2", "Lopez");
                        request.AddParameter("id_document_type", "IDC");
                        request.AddParameter("id_document_country", "ES");
                        request.AddParameter("serial_number", "12345678A");
                        request.AddParameter("email", "john_smithlop@uanataca.com");
                        request.AddParameter("mobile_phone_number", "+34999999999");
                        request.AddParameter("registration_authority", "124");
                        request.AddParameter("profile", "PFnubeQAFCiudadano");
                        request.AddParameter("token", "a44765ab8ca04e429a565f02d22179a0");
                        request.AddParameter("username", "5057249");
                        request.AddParameter("password", "Gy6F89xK");
                        request.AddParameter("pin", "t8tr6vkg");
                        request.AddFile("document_front", "sample_folder/img_front.png", "image/png");
                        request.AddFile("document_rear", "sample_folder/img_rear.png", "image/png");
                        request.AddFile("document_owner", "sample_folder/img_owner.png", "image/png");

                        IRestResponse response = client.Execute(request);

                        Console.WriteLine(response.Content);
                        return Task.CompletedTask;
                    }
                }  
  /api/v1/videoid:
    post:
      tags:
      - Video ID
      summary: CREATE VIDEO ID REQUEST
      description: Creates a new signature request to be used over Video ID validation
        process.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReqObject_VID'
        required: false
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status id
                  details:
                    type: object
                    properties:
                      videoid_pk:
                        type: string
                        description: The Video ID primary key
                      videoid_link:
                        type: string
                        description: The Video ID access link. Available only for
                          <a href="#section/Video-ID-Workflows/1-Step-validation">1-Step</a>
                          and <a href="#section/Video-ID-Workflows/2-Step-validation">2-Step</a>
                          validation mode.
                      request_pk:
                        type: string
                        description: The request primary key
              example:
                status: 200 OK
                details:
                  videoid_pk: 137
                  videoid_link: ""
                  request_pk: 45836
        400:
          description: Invalid JSON | Missing required parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status message
                  description:
                    type: string
                    description: Status description
              example:
                status: 400 Bad Request
                details: Videoid not enabled for Registration Authority 1234
        403:
          description: Permission Denied
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status message
                  description:
                    type: string
                    description: Status description
              example:
                status: 403 Forbidden
                details: 'Error creating new videoid request: {"detail":"You do not
                  have permission to perform this action."}'
        404:
          description: Invalid Registration Authority
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status id
                  details:
                    type: string
                    description: The response error message
              example:
                status: 404 Not Found
                details: Registration Authority not found
        500:
          description: Invalid Billing Credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status id
                  details:
                    type: string
                    description: The response error message
              example:
                status: 500 Internal Server Error
                details: Cannot check the remaining credit for the billing user. Please
                  check the credentials.
      x-codeSamples:
      - lang: curl
        source: |
          curl -i -X POST \
            https://one-shot.developers.uanataca.com/api/v1/videoid \
            -H 'Content-Type: application/json' \
            -d '{
              "mobile_phone_number": "+34699999999",
              "email": "mail@domain",
              "registration_authority": "139",
              "profile": "PFnubeQAFCiudadano",
              "billing_username": "user@uanataca.com",
              "billing_password": "ejVxTnFrZkI=",
              "webhook_url": "my-webhook-url.com",
              "env": "test"
            }'
      - lang: Python
        source: |
          import requests

          url = "https://one-shot.developers.uanataca.com/api/v1/videoid"

          payload = {
              "mobile_phone_number": "+34699999999",
              "email": "mail@domain",
              "registration_authority": "139",
              "profile": "PFnubeQAFCiudadano",
              "billing_username": "user@uanataca.com",
              "billing_password": "ejVxTnFrZkI=",
              "webhook_url": "my-webhook-url.com",
              "env": "test"
          }

          headers = {"Content-Type": "application/json"}

          response = requests.post(url, json=payload, headers=headers)

          data = response.json()
          print(data)
      - lang: Node.js
        source: |
          const fetch = require('node-fetch');

          const resp = await fetch(
            `https://one-shot.developers.uanataca.com/api/v1/videoid`,
            {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
              'mobile_phone_number': '+34699999999',
              'email': 'mail@domain',
              'registration_authority': '139',
              'profile': 'PFnubeQAFCiudadano',
              'billing_username': 'user@uanatca.com',
              'billing_password': 'ejVxTnFrZkI=',
              'webhook_url': 'my-webhook-url.com',
              'env': 'test'
              })
            }
          );

          const data = await resp.json();
          console.log(data);
      - lang: C#
        source: |
          using System;
          using System.Net.Http;
          using System.Threading.Tasks;
          using System.Text;
          using Newtonsoft.Json.Linq;

          public class Program
          {
            public static async Task Main(string[] args)
            {
              using (var client = new HttpClient())
              {
                JObject json = JObject.Parse(@"{
                  mobile_phone_number: '+34699999999',
                  email: 'mail@domain',
                  registration_authority: '139',
                  profile: 'PFnubeQAFCiudadano',
                  billing_username: 'user@uanataca.com',
                  billing_password: 'ejVxTnFrZkI=',
                  webhook_url: 'my-webhook-url.com',
                  env: 'test'
                }");
                var postData = new StringContent(json.ToString(), Encoding.UTF8, "application/json");
                var request = await client.PostAsync("https://one-shot.developers.uanataca.com/api/v1/videoid", postData);
                var response = await request.Content.ReadAsStringAsync();

                Console.WriteLine(response);
              }
            }
          }
      x-codegen-request-body-name: body
  /api/v1/videoid/{request_pk}/evidences:
    post:
      tags:
      - Video ID
      summary: UPLOAD DATA EVIDENCES
      description: Upload Request associated data
      parameters:
      - name: request_pk
        in: path
        description: The Request unique identifier
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadData_VID'
        required: false
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status code
                  details:
                    type: string
                    description: The response status message
              example:
                status: 200 OK
                details: Videoid evidences uploaded
        400:
          description: Invalid JSON | Missing required parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
                    description: Response error message
                  description:
                    type: string
                    description: Message description
              example:
                title: Invalid JSON
                description: 'Could not parse JSON body - Expecting '','' delimiter:
                  line 5 column 11 (char 205)'
        404:
          description: Invalid Request pk
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
                    description: Response error message
                  description:
                    type: string
                    description: Message description
              example:
                title: 404 Not Found
                description: Request not found
        500:
          description: Missing information | Evidences already uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status code
                  details:
                    type: string
                    description: The response error message
              example:
                status: 500 Internal Server Error
                details: 'Cannot upload evidences data for Request 46289: {"code": "412", "id": "22981d7f5029e78d", "error": "Invalid VideoId status ''COMPLETE''"}'
      x-codeSamples:
      - lang: curl
        source: |
          curl -i -X POST \
            https://one-shot.developers.uanataca.com/api/v1/videoid/45836/evidences \
            -H 'Content-Type: application/json' \
            -d '{
              "acceptance": {
                "description": "User Accepted Terms and Conditions and Privacy Policy",
                "url-doc-privacypolicy": "https://www.uanataca.com/public/pki/privacidad-PSC/",
                "ip": "186.0.91.53",
                "url-web-videoid": "https://cms.access.bit4id.org:13035/lcmpl/videoid/46b92251-4ba8-4930-a5aa-8631ec4666b6",
                "user-agent": "Mozilla/5.0 (Linux; Android 11; AC2003)",
                "date": 1622823879708,
                "url-doc-termsconditions": "https://www.uanataca.com/public/pki/terminos-VID/"
              },
              "videoid_data": {
                "images": {
                  "document_front": "/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAIBAQEBAQIBAQECAgICAgQDAgICAgUEBAM (...)",
                  "document_rear": "/I7ye60+aOKS0mVGVSD9RVfyXukjmnS3cAEbpMVm6M1ncWqS3FszptO1lPRRDJ+orI8b (...)",
                  "document_photo": "AkjOOwFfHFrrNlpXxcbU9QuIIIkvR56yddgHpX3GEj1PmanmdS/xV1ySVlv/AIbXLPO (...)",
                  "document_owner": "SSVnovgCZ4Lhk+R3lJPUDJr5t/Z/wBV1DWfjRbeI75B5iQytcykc7yMEAV2/iwC0T34 (...)"
                },
                "ocr_data": {
                  "given_name": "Name",
                  "surname_1": "Surname 1",
                  "surname_2": "Surname 2",
                  "mobile_phone_number": "+34999999999",
                  "email": "mail@domain",
                  "serial_number": "A9999999E",
                  "id_document_type": "IDC",
                  "id_document_country": ES
                },
                "security_checks": {
                  "otp_validation": true,
                  "documents_match": true,
                  "data_integrity": true,
                  "document_notcopy": true,
                  "document_notexpired": true,
                  "document_notunderage": true,
                  "liveliness": true
                },
                "similarity_level": "high"
              }
            }'
      - lang: Python
        source: |
          import requests

          url = "https://one-shot.developers.uanataca.com/api/v1/videoid/45836/evidences"

          payload = {
            "acceptance": {
              "description": "User Accepted Terms and Conditions and Privacy Policy",
              "url-doc-privacypolicy": "https://www.uanataca.com/public/pki/privacidad-PSC/",
              "ip": "186.0.91.53",
              "url-web-videoid": "https://cms.access.bit4id.org:13035/lcmpl/videoid/46b92251-4ba8-4930-a5aa-8631ec4666b6",
              "user-agent": "Mozilla/5.0 (Linux; Android 11; AC2003) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.88 Mobile Safari/537.36",
              "date": 1622823879708,
              "url-doc-termsconditions": "https://www.uanataca.com/public/pki/terminos-VID/"
            },
            "videoid_data": {
              "images": {
                "document_front": "/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAIBAQEBAQIBAQECAgICAgQDAgICAgUEBAM (...)",
                "document_rear": "/I7ye60+aOKS0mVGVSD9RVfyXukjmnS3cAEbpMVm6M1ncWqS3FszptO1lPRRDJ+orI8b (...)",
                "document_photo": "AkjOOwFfHFrrNlpXxcbU9QuIIIkvR56yddgHpX3GEj1PmanmdS/xV1ySVlv/AIbXLPO (...)",
                "document_owner": "SSVnovgCZ4Lhk+R3lJPUDJr5t/Z/wBV1DWfjRbeI75B5iQytcykc7yMEAV2/iwC0T34 (...)"
              },
              "ocr_data": {
                "given_name": "Name",
                "surname_1": "Surname 1",
                "surname_2": "Surname 2",
                "mobile_phone_number": "+34999999999",
                "email": "mail@domain",
                "serial_number": "A9999999E",
                "id_document_type": "IDC",
                "id_document_country": ES
              },
              "security_checks": {
                "otp_validation": true,
                "documents_match": true,
                "data_integrity": true,
                "document_notcopy": true,
                "document_notexpired": true,
                "document_notunderage": true,
                "liveliness": true
              },
              "similarity_level": "high"
            }
          }

          headers = {"Content-Type": "application/json"}

          response = requests.post(url, json=payload, headers=headers)

          data = response.json()
          print(data)
      - lang: Node.js
        source: |
          const fetch = require('node-fetch');

          const resp = await fetch(
            `https://one-shot.developers.uanataca.com/api/v1/videoid/45836/evidences`,
            {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                acceptance: {
                  description: 'User Accepted Terms and Conditions and Privacy Policy',
                  url-doc-privacypolicy: 'https://www.uanataca.com/public/pki/privacidad-PSC/',
                  ip: '186.0.91.53',
                  url-web-videoid: 'https://cms.access.bit4id.org:13035/lcmpl/videoid/46b92251-4ba8-4930-a5aa-8631ec4666b6',
                  user-agent: 'Mozilla/5.0 (Linux; Android 11; AC2003) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.88 Mobile Safari/537.36',
                  date: '1622823879708',
                  url-doc-termsconditions: 'https://www.uanataca.com/public/pki/terminos-VID/'
                },
                videoid_data: {
                  images: {
                    document_front: '/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAIBAQEBAQIBAQECAgICAgQDAgICAgUEBAM (...)',
                    document_rear: '/I7ye60+aOKS0mVGVSD9RVfyXukjmnS3cAEbpMVm6M1ncWqS3FszptO1lPRRDJ+orI8b (...)',
                    document_photo: 'AkjOOwFfHFrrNlpXxcbU9QuIIIkvR56yddgHpX3GEj1PmanmdS/xV1ySVlv/AIbXLPO (...)',
                    document_owner: 'SSVnovgCZ4Lhk+R3lJPUDJr5t/Z/wBV1DWfjRbeI75B5iQytcykc7yMEAV2/iwC0T34 (...)'
                  },
                  ocr_data: {
                    given_name: 'Name',
                    surname_1: 'Surname',
                    surname_2: 'Surname 2',
                    mobile_phone_number: '+34999999999',
                    email: 'mail@domain',
                    serial_number: 'A9999999E',
                    id_document_type: 'IDC',
                    id_document_country: ES
                  },
                  security_checks: {
                    otp_validation: true,
                    documents_match: true,
                    data_integrity: true,
                    document_notcopy: true,
                    document_notexpired: true,
                    document_notunderage: true,
                    liveliness: true
                  },
                  similarity_level: 'high'
                }
              })
            }
          );

          const data = await resp.json();
          console.log(data);
      - lang: C#
        source: |
          using System;
          using System.Net.Http;
          using System.Threading.Tasks;
          using System.Text;
          using Newtonsoft.Json.Linq;

          public class Program
          {
            public static async Task Main(string[] args)
            {
              using (var client = new HttpClient())
              {
                JObject json = JObject.Parse(@"{
                  acceptance: {
                    description: User Accepted Terms and Conditions and Privacy Policy,
                    url-doc-privacypolicy: https://www.uanataca.com/public/pki/privacidad-PSC/,
                    ip: 186.0.91.53,
                    url-web-videoid: https://cms.access.bit4id.org:13035/lcmpl/videoid/46b92251-4ba8-4930-a5aa-8631ec4666b6,
                    user-agent: Mozilla/5.0 (Linux; Android 11; AC2003) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.88 Mobile Safari/537.36,
                    date: 1622823879708,
                    url-doc-termsconditions: https://www.uanataca.com/public/pki/terminos-VID/
                  },
                  videoid_data: {
                    images: {
                      document_front: '/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAIBAQEBAQIBAQECAgICAgQDAgICAgUEBAM (...)',
                      document_rear: '/I7ye60+aOKS0mVGVSD9RVfyXukjmnS3cAEbpMVm6M1ncWqS3FszptO1lPRRDJ+orI8b (...)',
                      document_photo: 'AkjOOwFfHFrrNlpXxcbU9QuIIIkvR56yddgHpX3GEj1PmanmdS/xV1ySVlv/AIbXLPO (...)',
                      document_owner: 'SSVnovgCZ4Lhk+R3lJPUDJr5t/Z/wBV1DWfjRbeI75B5iQytcykc7yMEAV2/iwC0T34 (...)'
                    },
                    ocr_data: {
                      given_name: 'Name',
                      surname_1: 'Surname',
                      surname_2: 'Surname 2',
                      mobile_phone_number: '+34999999999',
                      email: 'mail@domain',
                      serial_number: 'A9999999E',
                      id_document_type: 'IDC',
                      id_document_country: ES
                    },
                    security_checks: {
                      otp_validation: true,
                      documents_match: true,
                      data_integrity: true,
                      document_notcopy: true,
                      document_notexpired: true,
                      document_notunderage: true,
                      liveliness: true
                    },
                    similarity_level: 'high'
                  }
                }");
                var postData = new StringContent(json.ToString(), Encoding.UTF8, "application/json");
                var request = await client.PostAsync("https://one-shot.developers.uanataca.com/api/v1/videoid/45836/evidences", postData);
                var response = await request.Content.ReadAsStringAsync();

                Console.WriteLine(response);
              }
            }
          }
      x-codegen-request-body-name: body
  /api/v1/videoid/{request_pk}/evidences/video:
    post:
      tags:
      - Video ID
      summary: UPLOAD VIDEO
      description: Upload Request associated video
      parameters:
      - name: request_pk
        in: path
        description: The Request unique identifier
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - video
              properties:
                video:
                  type: string
                  description: The video to be uploaded
        required: true
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status code
                  details:
                    type: string
                    description: The response status message
              example:
                status: 200 OK
                details: Videoid video upload completed
        404:
          description: Invalid Request pk
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
                    description: Response error message
                  description:
                    type: string
                    description: Message description
              example:
                title: 404 Not Found
                description: Request not found
      x-codeSamples:
      - lang: curl
        source: "curl -i -X POST \\\n  https://one-shot.developers.uanataca.com/api/v1/videoid/45836/evidences/video/\
          \ \\\n  -H 'Content-Type: multipart/form-data' \\\n  -F video=@sample_folder/sample_video.mp4\
          \ \n"
      - lang: Python
        source: |
          import requests

          url = "https://one-shot.developers.uanataca.com/api/v1/videoid/45836/evidences/video/"

          payload={'type': 'document_front'}
          files=[
            ('document',('file',open('sample_folder/sample_video.mp4','rb'),'video/png'))
          ]
          headers = {
            'Content-Type': 'multipart/form-data'
          }

          response = requests.request("POST", url, headers=headers, data=payload, files=files)

          print(response.text)
      - lang: Node.js
        source: |

          const fs = require('fs');
          const FormData = require('form-data');
          const fetch = require('node-fetch');
          const formData = new FormData();

          formData.append('type', 'document_front');
          formData.append('document', fs.createReadStream('sample_folder/sample_video.mp4'));

          const url = 'https://one-shot.developers.uanataca.com/api/v1/videoid/45836/evidences/video/';

          const options = {
            method: 'POST',
            headers: {
              Accept: 'text/plain',
              'Content-Type': 'multipart/form-data; boundary=---011000010111000001101001'
            }
          };

          options.body = formData;

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: C#
        source: |
                using System;
                using System.Threading.Tasks;
                using RestSharp;

                public class Program
                {
                  public static Task Main(string[] args)
                    {
                        var client = new RestClient("https://one-shot.developers.uanataca.com/api/v1/videoid/45836/evidences/video/");
                        client.Timeout = -1;

                        string vidPath = "sample_folder/sample_video.mp4";

                        var request = new RestRequest(Method.POST);
                        request.AlwaysMultipartFormData = true;
                        request.AddHeader("content-type", "multipart/form-data");
                        request.AddFile("video", vidPath, "video/mp4");

                        IRestResponse response = client.Execute(request);

                        Console.WriteLine(response.Content);
                        return Task.CompletedTask;
                    }
                }          
  /api/v1/request/{request_pk}:
    get:
      tags:
      - Requests
      summary: GET REQUEST
      description: Retrieve request information with the id obtained in the **CREATE
        REQUEST** response.
      parameters:
      - name: request_pk
        in: path
        description: The request unique identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status id
                  details:
                    type: object
                    properties: {}
                    description: JSON object with information associated to the request
              example:
                status: 200 OK
                details:
                  paperless_mode: true
                  mobile_phone_number: +34600123123
                  country_name: ES
                  approving_user:
                    pk: 232
                    request: 4721
                    permission_profile: 1
                    registration_authority: 139
                  secure_element: 2
                  communication_language: ""
                  profile: PFnubeQAFCiudadano
                  registering_user:
                    pk: 232
                    request: 4721
                    permission_profile: 1
                    registration_authority: 139
                  approving_rao:
                    is_identificator: false
                    id_document_description: ""
                    certificate:
                      profile: PFnubeAF
                      status: 0
                      valid_from: 2019-10-31T16:38:00Z
                      valid_to: 2021-10-30T16:38:00Z
                      valid: VALID
                      serial_number: 58edb21a8a653533
                      issuer: 2.5.4.97=VATES-A66721499, CN=UANATACA CA1 DEVEL 2016,
                        OU=AC-UANATACA, O=UANATACA S.A., L=Barcelona (see current
                        address at www.uanataca.com/address), C=ES
                      data: MIIH0jCCBbqgAwIBAgIIWO2yGoplNTMwDQYJKoZIhvcNAQELBQAwgb0xCzAJBgNVBAYTAkVTMUQwQgYDVQQHDDtCYXJjZWxvbmEgKHNlZSBjdXJyZW50IGFkZHJlc3MgYXQgd3d3LnVhbmF0YWNhLmNvbS9hZGRyZXNzKTEWMBQGA1UECgwNVUFOQVRBQ0EgUy5BLjEUMBIGA1UECwwLQUMtVUFOQVRBQ0ExIDAeBgNVBAMMF1VBTkFUQUNBIENBMSBERVZFTCAyMDE2MRgwFgYDVQRhDA9WQVRFUy1BNjY3MjE0OTkwHhcNMTkxMDMxMTYzODAwWhcNMjExMDMwMTYzODAwWjBnMQswCQYDVQQGEwJFUzERMA8GA1UEBAwIT3BlcmF0b3IxEDAOBgNVBCoMB09uZVNob3QxGDAWBgNVBAUTD0lEQ0VTLTEyMzIxMzEyMzEZMBcGA1UEAwwQT25lU2hvdCBPcGVyYXRvcjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALXDwaw+RL9B18/479y8PrlDCTKQAHeMH4RQh5Fy980RLAJr2hiwfCeJKZ750jqzxATVHKz5mG8brA3YIZbpTCe3WmD1e2VjgSRWFDy18yUqrWqWTAzOtHyGOb6iPOh1Aj8vuBJmBCEoAQQdlXWX8ORfzrQ+Wt14GG9EkYC2WdG6LN3XH6Qso2wvCo/JQKDTYeTAcMqkeqHVqUVz4gcGikcox59kaLgTKwmVjO2Ajmr7xYB9S+/V8pvZk8N3u/fZpS7c9CVMqMidB5K2ZrPGPBA4uKFVLN83Y6lx9dCTaSyACqM8CpfD3CzJU6qt9emDzR6r39W2ylSjCuYXCtQf3scCAwEAAaOCAykwggMlMHIGCCsGAQUFBwEDBGYwZDAIBgYEAI5GAQEwCwYGBACORgEDAgEPMDYGBgQAjkYBBTAsMCoWJGh0dHBzOi8vd3d3LnVhbmF0YWNhLmNvbS9wdWJsaWMvY3BzLxMCRU4wEwYGBACORgEGMAkGBwQAjkYBBgEwgdcGCCsGAQUFBwEBBIHKMIHHMFUGCCsGAQUFBzAChklodHRwOi8vd3d3LnVhbmF0YWNhLmNvbS9wdWJsaWMvZG93bmxvYWQvdHNwX2NlcnRpZmljYXRlcy9zdWJvcmRpbmF0ZTEuY3J0MDYGCCsGAQUFBzABhipodHRwOi8vb2NzcDEudWFuYXRhY2EuY29tL3B1YmxpYy9wa2kvb2NzcC8wNgYIKwYBBQUHMAGGKmh0dHA6Ly9vY3NwMi51YW5hdGFjYS5jb20vcHVibGljL3BraS9vY3NwLzAdBgNVHQ4EFgQU8KukJlm7RtVTT7de7HvygCgrD0IwDAYDVR0TAQH/BAIwADAfBgNVHSMEGDAWgBTKzIqlz6SMIlrW+5f3T7RO/dXvrjCBqgYDVR0gBIGiMIGfMIGRBgsrBgEEAYLxNgEBBTCBgTBNBggrBgEFBQcCAjBBDD9DZXJ0aWZpY2FkbyBjdWFsaWZpY2FkbyBkZSBQZXJzb25hIEbDrXNpY2EgZW4gSFNNIGNlbnRyYWxpemFkby4wMAYIKwYBBQUHAgEWJGh0dHBzOi8vd3d3LnVhbmF0YWNhLmNvbS9wdWJsaWMvY3BzLzAJBgcEAIvsQAEAMIGPBgNVHR8EgYcwgYQwQKA+oDyGOmh0dHA6Ly9jcmwxLnVhbmF0YWNhLmNvbS9wdWJsaWMvcGtpL2NybC9DQTFzdWJvcmRpbmFkYS5jcmwwQKA+oDyGOmh0dHA6Ly9jcmwyLnVhbmF0YWNhLmNvbS9wdWJsaWMvcGtpL2NybC9DQTFzdWJvcmRpbmFkYS5jcmwwDgYDVR0PAQH/BAQDAgXgMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcDBDAZBgNVHREEEjAQgQ5hc2lAYml0NGlkLmNvbTANBgkqhkiG9w0BAQsFAAOCAgEAXdhMj8k340YquaJ92xtasDXkyA5X3oLyVuuxRmm1WelATEEwLvvnFFCEiyndI0JsTPM+fpdIgpWJVmaFStKHhknJzmjwFsy8a+k5ORbnuuZq+7cgd6q9TcJLR/YljlqzO9Ng22IYM/T6g6tKdxsZqxeumcjN26Z3yn/jnbwJvhbvnvsrr/GiRNcpo/Kz+L5Q90Gd1YOu8ec+wndyQgaa+JnLG7kAgz7OW8tsLVYRSpjx7MF9Pd4IUXboVw2sx7mQwWOCOiup+8zLBJ3tTfphUTwp8dS4j4jElbo7N6IJcLG2+9UfGECmGyPgrDyMWFU6sOcmlZkpaxsCY8j7/qTqovn1a9hpfv+Ngn4ddLSosAeeD0z5O3QUmp1LAdIPNQXHIA8yWlvSTqbeO/Ocf0weqvowN/Q8nGsRaTtQTrMkQGCdTG3aYDYGxaVm5zxBwxm5ujHexPZTE0AFNbsTo7/R0zjK3lovWJpJh+Qm7IPsp4d/RYSS+DZnXBmNg9lQjR9hwezhUlVLyDiVgw9xJ5ddBRPdDiJlqpGZasozyyv6yp4NPgy0ZZHiapqRvfGXSGwslTRaw5ok/66xzFSOP7LZCnvi8h4tKfVXFT5bTFydX13mfPobZk/+GpBP2/MS1yktbef5h46f00c+voAtA2fal/VMDPVWNZ58YTuKHx3zSCo=
                      subject: CN=OneShot Operator, 2.5.4.5=IDCES-123213123, 2.5.4.42=OneShot,
                        2.5.4.4=Operator, C=ES
                    registration_authority: []
                    registration_authority_master: 139
                    id_document_number: "123213213213"
                    given_name: OneShot
                    surname_2: ""
                    pk: 972
                    surname_1: Operator
                    id_document_issuer: ""
                  email: name@domain.com
                  surname_2: Surname2
                  surname_1: Surname1
                  validity_time: "1"
                  videoid_mode: false
                  serial_number: 12345678A
                  scratchcard: "5039078"
                  registration_authority: 139
                  id_document_type: IDC
                  pk: 45836
                  given_name: Name
                  status: ENROLLREADY
                  certificate_set: []
                  id_document_country: ES
      x-codeSamples:
      - lang: curl
        source: |
          curl -i -X GET \
            https://one-shot.developers.uanataca.com/api/v1/request/29571
      - lang: Python
        source: |
          import requests

          url = "https://one-shot.developers.uanataca.com/api/v1/request/29571"

          response = requests.get(url)

          data = response.json()
          print(data)
      - lang: Node.js
        source: |
          const fetch = require('node-fetch');

          const resp = await fetch(
            'https://one-shot.developers.uanataca.com/api/v1/request/29571',
            {method: 'GET'}
          );

          const data = await resp.text();
          console.log(data);
      - lang: C#
        source: |
          using System;
          using System.Net.Http;
          using System.Threading.Tasks;

          public class Program
          {
            public static async Task Main(string[] args)
            {
              using (var client = new HttpClient())
              {
                var request = await client.GetAsync("https://one-shot.developers.uanataca.com/api/v1/request/29571");
                var response = await request.Content.ReadAsStringAsync();

                Console.WriteLine(response);
              }
            }
          }
    put:
      tags:
      - Video ID
      summary: UPDATE REQUEST
      description: Updates a Video ID signature request.
      parameters:
      - name: request_pk
        in: path
        description: The request unique identifier
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateReqObject_VID'
        required: false
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status id
                  details:
                    type: object
                    properties:
                      videoid_pk:
                        type: string
                        description: The Video ID primary key
                      videoid_link:
                        type: string
                        description: The Video ID access link
                      request_pk:
                        type: string
                        description: The request pk number
              example:
                status: 200 OK
                details:
                  videoid_pk: 137
                  videoid_link: ""
                  request_pk: 45836
        400:
          description: JSON syntax error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status message
                  description:
                    type: string
                    description: Status description
              example:
                title: Invalid JSON
                description: 'Could not parse JSON body - Expecting '','' delimiter:
                  line 9 column 5 (char 220)'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status message
                  description:
                    type: string
                    description: Status description
              example:
                status: 403 Forbidden
                details: 'Error creating new videoid request: {"detail":"You do not
                  have permission to perform this action."}'
        404:
          description: Invalid Registration Authority
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status id
                  details:
                    type: string
                    description: The response error message
              example:
                status: 404 Not Found
                details: Registration Authority not found
        500:
          description: Invalid Request pk | Missing required parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status id
                  details:
                    type: string
                    description: The response error message
              example:
                status: 500 Internal Server Error
                details: 'Cannot update the Request 46263: {"code": "500", "id": "5c05e064d7a903ac",
                  "error": "Invalid ScratchCard"}'
      x-codeSamples:
      - lang: curl
        source: |
          curl -i -X PUT \
            https://one-shot.developers.uanataca.com/api/v1/request/45836 \
            -H 'Content-Type: application/json' \
            -d '{
              "scratchcard": "1234567",
              "given_name": "John",
              "surname_1": "Smith",
              "surname_2": "Lopez",
              "birth_date": "01/01/2000",
              "email": "mail@domain.com",
              "mobile_phone_number": "+34999999999",
              "serial_number": "A9999999E",
              "registration_authority": "1234",
              "profile": "PFnubeQAFCiudadano",
              "country_name": "ES"
            }'
      - lang: Python
        source: |      
          import requests

          url = "https://one-shot.developers.uanataca.com/api/v1/request/45836" 

          payload = {
            "scratchcard": "1234567",
            "given_name": "John",
            "surname_1": "Smith",
            "surname_2": "Lopez",
            "birth_date": "01/01/2000",
            "email": "mail@domain.com",
            "mobile_phone_number": "+34999999999",
            "serial_number": "A9999999E",
            "registration_authority": "1234",
            "profile": "PFnubeQAFCiudadano",
            "country_name": "ES"
          }

          headers = {"Content-Type": "application/json"}

          response = requests.put(url, json=payload, headers=headers)

          data = response.json()
          print(data)
      - lang: Node.js
        source: |
          const fetch = require('node-fetch');

          const resp = await fetch(
            `https://one-shot.developers.uanataca.com/api/v1/request/45836`,
            {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                scratchcard: '1234567',
                given_name: 'John',
                surname_1: 'Smith',
                surname_2: 'Lopez',
                birth_date: '01/01/2000',
                email: 'mail@domain.com',
                mobile_phone_number: '+34999999999',
                serial_number: 'A9999999E',
                registration_authority: '1234',
                profile: 'PFnubeQAFCiudadano',
                country_name: 'ES'
              })
            }
          );

          const data = await resp.json();
          console.log(data);
      - lang: C#
        source: |
          using System;
          using System.Net.Http;
          using System.Threading.Tasks;
          using System.Text;
          using Newtonsoft.Json.Linq;

          public class Program
          {
            public static async Task Main(string[] args)
            {
              using (var client = new HttpClient())
              {
                JObject json = JObject.Parse(@"{
                  scratchcard: '1234567',
                  given_name: 'John',
                  surname_1: 'Smith',
                  surname_2: 'Lopez',
                  birth_date: '01/01/2000',
                  email: 'mail@domain.com',
                  mobile_phone_number: '+34999999999',
                  serial_number: 'A9999999E',
                  registration_authority: '1234',
                  profile: 'PFnubeQAFCiudadano',
                  country_name: 'ES'
                }");
                var postData = new StringContent(json.ToString(), Encoding.UTF8, "application/json");
                var request = await client.PutAsync("https://one-shot.developers.uanataca.com/api/v1/request/45836", postData);
                var response = await request.Content.ReadAsStringAsync();

                Console.WriteLine(response);
              }
            }
          }
      x-codegen-request-body-name: body
    delete:
      tags:
      - Video ID
      summary: CANCEL REQUEST
      description: Cancels the Video ID One-Shot Signature request
      parameters:
      - name: request_pk
        in: path
        description: The unique identifier of the Request
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status id
                  details:
                    type: string
                    description: The successful response message
              example:
                status: 200 OK
                details: Request directory removed successfully
        404:
          description: Invalid Request pk
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status id
                  details:
                    type: string
                    description: The response error message
              example:
                status: 404 Not Found
                details: Request 1234567 not found
      x-codeSamples:
      - lang: curl
        source: |
          curl -i -X DELETE \
            https://one-shot.developers.uanataca.com/api/v1/request/45836/
      - lang: Python
        source: |
          import requests

          url = "https://one-shot.developers.uanataca.com/api/v1/requests/45836/"

          response = requests.delete(url)

          data = response.json()
          print(data)
      - lang: Node.js
        source: |
          const fetch = require('node-fetch');

          const resp = await fetch(
            'https://one-shot.developers.uanataca.com/api/v1/requests/45836/',
            {method: 'DELETE'}
          );

          const data = await resp.text();
          console.log(data);
      - lang: C#
        source: "using System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\n\
          using System.Security.Cryptography.X509Certificates;\n\npublic class Program\n\
          {\n  public static async Task Main(string[] args)\n  {\n    X509Certificate2\
          \ clientCert = new X509Certificate2(\"./path/to/cert_and_key.p12\", \"password\"\
          ); \n    HttpClientHandler handler = new HttpClientHandler();\n\n    //\
          \ This disables the SSL verification in TEST mode\n    handler.ServerCertificateCustomValidationCallback\
          \ = (message, cert, chain, sslPolicyErrors) =>\n    {\n        return true;\n\
          \    };\n    \n    handler.ClientCertificates.Add(clientCert);\n    \n \
          \   using (var client = new HttpClient(handler))\n    {\n      var request\
          \ = await client.DeleteAsync(\"https://one-shot.developers.uanataca.com/api/v1/requests/45836/\"\
          );\n      var response = await request.Content.ReadAsStringAsync();\n\n\
          \      Console.WriteLine(response);\n    }\n  }\n}\n"

  /api/v1/async/status/{pk}:
    get:
      tags:
      - Requests
      summary: GET REQUEST ASYNCHRONOUS
      description: Shows the status of a Request executed under asynchronous mode.
      parameters:
      - name: pk
        in: path
        description: The request unique identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status id.
                  details:
                    type: object
                    properties: {}
                    description: 'JSON object with information associated to the request </br> <blockquote style=''background-color:
            #faf3ac; border-color: #5a5a5a; color: #3b3b3b;''><b>⚠ If the `useasync` parameter is not set or set to false, this call will show an "Unknown" status message.</b></blockquote>'
              example:
                status: 200 OK
                details: approved
        400:
          description: Request id not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status id
                  details:
                    type: object
                    properties: {}
                    description: JSON object with information associated to the request
              example:
                status: 404 Not Found
                details: Request 29571 not found. Make sure the upload directory is correct

      x-codeSamples:
      - lang: curl
        source: |
          curl -i -X GET \
            https://one-shot.developers.uanataca.com/api/v1/async/status/29571
      - lang: Python
        source: |
          import requests

          url = "https://one-shot.developers.uanataca.com/api/v1/async/status/29571"

          response = requests.get(url)

          data = response.json()
          print(data)
      - lang: Node.js
        source: |
          const fetch = require('node-fetch');

          const resp = await fetch(
            'https://one-shot.developers.uanataca.com/api/v1/async/status/29571',
            {method: 'GET'}
          );

          const data = await resp.text();
          console.log(data);
      - lang: C#
        source: |
          using System;
          using System.Net.Http;
          using System.Threading.Tasks;

          public class Program
          {
            public static async Task Main(string[] args)
            {
              using (var client = new HttpClient())
              {
                var request = await client.GetAsync("https://one-shot.developers.uanataca.com/api/v1/async/status/29571");
                var response = await request.Content.ReadAsStringAsync();

                Console.WriteLine(response);
              }
            }
          }
  /api/v1/otp/{pk}:
    post:
      tags:
      - Requests
      summary: GENERATE OTP
      description: Generates a One-Time Password (OTP) code for the user. The OTP
        is sent directly to the user's mobile phone as an SMS message.</br> <html><blockquote
        style='background-color:#faf3ac; border-color:#DFDFDF; color:#3b3b3b;'><b>⚠This
        method is only required and available for requests using Uanataca SMS method</b></blockquote></html>
      parameters:
      - name: pk
        in: path
        description: The request unique identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status id
                  details:
                    type: string
                    description: OTP sent code confirmation message
              example:
                status: 200 OK
                details: OTP generated
      x-codeSamples:
      - lang: curl
        source: |
          curl -i -X POST \
            https://one-shot.developers.uanataca.com/api/v1/otp/29571
      - lang: Python
        source: |
          import requests

          url = "https://one-shot.developers.uanataca.com/api/v1/otp/29571"

          response = requests.post(url)

          data = response.json()
          print(data)
      - lang: Node.js
        source: |
          const fetch = require('node-fetch');

          const resp = await fetch(
            'https://one-shot.developers.uanataca.com/api/v1/otp/29571',
            {method: 'POST'}
          );

          const data = await resp.text();
          console.log(data);
      - lang: C#
        source: |
          using System;
          using System.Net.Http;
          using System.Threading.Tasks;

          public class Program
          {
            public static async Task Main(string[] args)
            {
              using (var client = new HttpClient())
              {
                var request = await client.PostAsync("https://one-shot.developers.uanataca.com/api/v1/otp/29571", null);
                var response = await request.Content.ReadAsStringAsync();

                Console.WriteLine(response);
              }
            }
          }
  /api/v1/sign/{pk}:
    post:
      tags:
      - Requests
      summary: SIGN
      description: Signs all documents associated to a request using a single-use
        certificate generated for the signature request.
      parameters:
      - name: pk
        in: path
        description: The request unique identifier
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignObject'
        required: false
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status id
                  details:
                    type: string
                    description: Successful signature(s) confirmation message
              example:
                status: 200 OK
                details: Documents correctly signed
      x-codeSamples:
      - lang: curl
        source: |
          curl -i -X POST \
            https://one-shot.developers.uanataca.com/api/v1/sign/29571 \
            -H 'Content-Type: application/json' \
            -d '{
                  "secret"   : "052174",
                  "options": {
                      "5f04778a-54f6-426a-b204-5573eb01e5da": {
                          "position": "300, 100, 500, 150",
                          "image": "b0b6370e-8b54-4d8b-ab6f-a002cf08dd28",
                          "page": 0
                      }
                }'
      - lang: Python
        source: |
          import requests

          url = "https://one-shot.developers.uanataca.com/api/v1/sign/29571"

          payload = {
                      "secret"   : "052174",
                      "options": {
                          "5f04778a-54f6-426a-b204-5573eb01e5da": {
                            "position": "300, 100, 500, 150",
                            "image": "b0b6370e-8b54-4d8b-ab6f-a002cf08dd28",
                            "page": 0
                      }
                    }

          headers = {"Content-Type": "application/json"}

          response = requests.post(url, json=payload, headers=headers)

          data = response.json()
          print(data)
      - lang: Node.js
        source: |
          const fetch = require('node-fetch');

          const resp = await fetch(
            'https://one-shot.developers.uanataca.com/api/v1/sign/29571',
            {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                  "secret"   : "052174",
                  "options": {
                      "5f04778a-54f6-426a-b204-5573eb01e5da": {
                          "position": "300, 100, 500, 150",
                          "image": "b0b6370e-8b54-4d8b-ab6f-a002cf08dd28",
                          "page": 0
                      }
                    })
            }
          );

          const data = await resp.json();
          console.log(data);
      - lang: C#
        source: |
          using System;
          using System.Net.Http;
          using System.Threading.Tasks;
          using System.Text;
          using Newtonsoft.Json.Linq;

          public class Program
          {
            public static async Task Main(string[] args)
            {
              using (var client = new HttpClient())
              {
                JObject json = JObject.Parse(@"{
                  "secret"   : "052174",
                  "options": {
                      "5f04778a-54f6-426a-b204-5573eb01e5da": {
                          "position": "300, 100, 500, 150",
                          "image": "b0b6370e-8b54-4d8b-ab6f-a002cf08dd28",
                          "page": 0
                      }
                    }");
                var postData = new StringContent(json.ToString(), Encoding.UTF8, "application/json");
                var request = await client.PostAsync("https://one-shot.developers.uanataca.com/api/v1/sign/29571", postData);
                var response = await request.Content.ReadAsStringAsync();

                Console.WriteLine(response);
              }
            }
          }
      x-codegen-request-body-name: body

  /api/v1/async/sign/{pk}:
    post:
      tags:
      - Requests
      summary: ASYNCHRONOUS SIGN 
      description: (Asynchronous mode) Signs all documents associated to a request using a single-use
        certificate generated for the signature request. 
      parameters:
      - name: pk
        in: path
        description: The request unique identifier
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignObject'
        required: false
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status id
                  details:
                    type: string
                    description: Successful signature(s) confirmation message
              example:
                status: 200 OK
                details: Documents correctly signed
      x-codeSamples:
      - lang: curl
        source: |
          curl -i -X POST \
            https://one-shot.developers.uanataca.com/api/v1/async/sign/29571 \
            -H 'Content-Type: application/json' \
            -d '{
                  "secret"   : "052174",
                  "options": {
                      "5f04778a-54f6-426a-b204-5573eb01e5da": {
                          "position": "300, 100, 500, 150",
                          "image": "b0b6370e-8b54-4d8b-ab6f-a002cf08dd28",
                          "page": 0
                      }
                }'
      - lang: Python
        source: |
          import requests

          url = "https://one-shot.developers.uanataca.com/api/v1/async/sign/29571"

          payload = {
                      "secret"   : "052174",
                      "options": {
                          "5f04778a-54f6-426a-b204-5573eb01e5da": {
                            "position": "300, 100, 500, 150",
                            "image": "b0b6370e-8b54-4d8b-ab6f-a002cf08dd28",
                            "page": 0
                      }
                    }

          headers = {"Content-Type": "application/json"}

          response = requests.post(url, json=payload, headers=headers)

          data = response.json()
          print(data)
      - lang: Node.js
        source: |
          const fetch = require('node-fetch');

          const resp = await fetch(
            'https://one-shot.developers.uanataca.com/api/v1/async/sign/29571',
            {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                  "secret"   : "052174",
                  "options": {
                      "5f04778a-54f6-426a-b204-5573eb01e5da": {
                          "position": "300, 100, 500, 150",
                          "image": "b0b6370e-8b54-4d8b-ab6f-a002cf08dd28",
                          "page": 0
                      }
                    })
            }
          );

          const data = await resp.json();
          console.log(data);
      - lang: C#
        source: |
          using System;
          using System.Net.Http;
          using System.Threading.Tasks;
          using System.Text;
          using Newtonsoft.Json.Linq;

          public class Program
          {
            public static async Task Main(string[] args)
            {
              using (var client = new HttpClient())
              {
                JObject json = JObject.Parse(@"{
                  "secret"   : "052174",
                  "options": {
                      "5f04778a-54f6-426a-b204-5573eb01e5da": {
                          "position": "300, 100, 500, 150",
                          "image": "b0b6370e-8b54-4d8b-ab6f-a002cf08dd28",
                          "page": 0
                      }
                    }");
                var postData = new StringContent(json.ToString(), Encoding.UTF8, "application/json");
                var request = await client.PostAsync("https://one-shot.developers.uanataca.com/api/v1/async/sign/29571", postData);
                var response = await request.Content.ReadAsStringAsync();

                Console.WriteLine(response);
              }
            }
          }
      x-codegen-request-body-name: body
  /api/v1/document/{pk}:
    post:
      tags:
      - Documents
      summary: UPLOAD DOCUMENT
      description: Uploads a pdf document to be signed. The document is associated
        to a signature request.
      parameters:
      - name: pk
        in: path
        description: The request unique identifier
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  description: Local path of the pdf file to be signed
                  type: array
                  items:
                    type: string
                    format: binary
        required: true
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status id
                  details:
                    type: string
                    description: The uploaded document id
              example:
                status: 200 OK
                details: a73b1253-838f-4340-8ae8-e0a1524f7472
      x-codeSamples:
      - lang: curl
        source: |
          curl -i -X POST \
            https://one-shot.developers.uanataca.com/api/v1/document/29571 \
            -H 'Content-Type: multipart/form-data' \
            -F file=@sample_folder/document.pdf
      - lang: Python
        source: |
          import requests

          url = "https://one-shot.developers.uanataca.com/api/v1/document/29571"

          payload={}
          files=[
            ('file',('document.pdf',open('sample_folder/document.pdf','rb'),'application/pdf'))
          ]

          headers = {"Content-Type": "multipart/form-data"}

          response = requests.request("POST", url, headers=headers, data=payload, files=files)

          print(response.text)
      - lang: Node.js
        source: |
          import fetch from "node-fetch";
          import FormData from "form-data";
          import fs from "fs";

          var formData = new FormData();

          formData.append('file', fs.createReadStream('sample_folder/document.pdf'));

          var url = 'https://one-shot.developers.uanataca.com/api/v1/document/29571';

          var options = {
            method: 'POST',
            body: formData,
            redirect: 'follow'
          };

          options.body = formData;

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: C#
        source: |


                using System;
                using System.Threading.Tasks;
                using RestSharp;

                public class Program
                {
                  public static Task Main(string[] args)
                    {
                        var client = new RestClient("https://one-shot.developers.uanataca.com/api/v1/document/29571");
                        client.Timeout = -1;

                        string docPath = "sample_folder/sample_document.pdf";

                        var request = new RestRequest(Method.POST);
                        request.AlwaysMultipartFormData = true;
                        request.AddHeader("content-type", "multipart/form-data");
                        request.AddFile("file", docPath, "application/pdf");

                        IRestResponse response = client.Execute(request);

                        Console.WriteLine(response.Content);
                        return Task.CompletedTask;
                    }
                }     
  /api/v1/document/{pk}/{type}/{uid}:
    get:
      tags:
      - Documents
      summary: RETRIEVE DOCUMENT
      description: Retrieves the specified original or signed document.
      parameters:
      - name: pk
        in: path
        description: The request unique identifier
        required: true
        schema:
          type: string
      - name: type
        in: path
        description: |
          Types of documents for retrieval:
           * **original** - The original document
           * **signed** - The signed document
        required: true
        schema:
          type: string
          enum:
          - original
          - signed
      - name: uid
        in: path
        description: The document unique identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful Response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
              example: " %PDF-1.7\n %����\n 1 0 obj\n <</Type/Catalog/Pages 2 0 R/Lang(es-ES)\
                \ /StructTreeRoot 10 0 R/MarkInfo<</Marked true>>/Metadata 26 0 R/ViewerPreferences\
                \ 27 0 R>>\n endobj\n\n\n2 0 obj\n <</Type/Pages/Count 1/Kids[ 3 0\
                \ R] >>\n endobj\n\n\n3 0 obj\n <</Type/Page/Parent 2 0 R/Resources<</Font<</F1\
                \ 5 0 R>>/ExtGState<</GS7 7 0 R/GS8 8 0 R>>/ProcSet[/PDF/Text/ImageB/ImageC/ImageI]\
                \ >>/MediaBox[ 0 0 595.32 841.92] /Contents 4 0 R/Group<</Type/Group/S/Transparency/CS/DeviceRGB>>/Tabs/S/StructParents\
                \ 0>>\n endobj\n (...)\n "
      x-codeSamples:
      - lang: curl
        source: |
          curl -i -X GET \
            https://one-shot.developers.uanataca.com/api/v1/document/29571/signed/a73b1253-838f-4340-8ae8-e0a1524f7472
      - lang: Python
        source: |
          import requests

          url = "https://one-shot.developers.uanataca.com/api/v1/document/29571/signed/a73b1253-838f-4340-8ae8-e0a1524f7472"

          response = requests.get(url)

          data = response.json()
          print(data)
      - lang: Node.js
        source: |
          const fetch = require('node-fetch');

          const resp = await fetch(
            'https://one-shot.developers.uanataca.com/api/v1/document/29571/signed/a73b1253-838f-4340-8ae8-e0a1524f7472',
            {method: 'GET'}
          );

          const data = await resp.text();
          console.log(data);
      - lang: C#
        source: |
          using System;
          using System.Net.Http;
          using System.Threading.Tasks;

          public class Program
          {
            public static async Task Main(string[] args)
            {
              using (var client = new HttpClient())
              {
                var request = await client.GetAsync("https://one-shot.developers.uanataca.com/api/v1/document/29571/signed/a73b1253-838f-4340-8ae8-e0a1524f7472");
                var response = await request.Content.ReadAsStringAsync();

                Console.WriteLine(response);
              }
            }
          }            
    delete:
      tags:
      - Documents
      summary: DELETE DOCUMENT
      description: Deletes the specified original or signed document.
      parameters:
      - name: pk
        in: path
        description: The request unique identifier
        required: true
        schema:
          type: string
      - name: type
        in: path
        description: |
          Types of documents for retrieval:
           * **original** - The original document
           * **signed** - The signed document
        required: true
        schema:
          type: string
          enum:
          - original
          - signed
      - name: uid
        in: path
        description: The document unique identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status id
                  details:
                    type: string
                    description: Successful document deletion confirmation message
              example:
                status: 200 OK
                details: Document successfully deleted
      x-codeSamples:
      - lang: curl
        source: |
          curl -i -X DELETE \
            https://one-shot.developers.uanataca.com/api/v1/document/29571/signed/a73b1253-838f-4340-8ae8-e0a1524f7472
      - lang: Python
        source: |
          import requests

          url = "https://one-shot.developers.uanataca.com/api/v1/document/29571/signed/a73b1253-838f-4340-8ae8-e0a1524f7472"

          response = requests.delete(url)

          data = response.json()
          print(data)
      - lang: Node.js
        source: |
          const fetch = require('node-fetch');

          const resp = await fetch(
            'https://one-shot.developers.uanataca.com/api/v1/document/29571/signed/a73b1253-838f-4340-8ae8-e0a1524f7472',
            {method: 'DELETE'}
          );

          const data = await resp.text();
          console.log(data);
      - lang: C#
        source: |
          using System;
          using System.Net.Http;
          using System.Threading.Tasks;

          public class Program
          {
            public static async Task Main(string[] args)
            {
              using (var client = new HttpClient())
              {
                var request = await client.DeleteAsync("https://one-shot.developers.uanataca.com/api/v1/document/29571/signed/a73b1253-838f-4340-8ae8-e0a1524f7472");
                var response = await request.Content.ReadAsStringAsync();

                Console.WriteLine(response);
              }
            }
          }            
  /api/v1/documents/{pk}:
    get:
      tags:
      - Documents
      summary: LIST DOCUMENTS
      description: Lists all documents associated to a specific request.
      parameters:
      - name: pk
        in: path
        description: The request unique identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status id
                  details:
                    type: object
                    properties:
                      docid:
                        type: object
                        properties:
                          upload_date:
                            type: string
                            description: The document upload date
                          ext:
                            type: string
                            description: The file extension
                          size:
                            type: string
                            description: The file size in bytes
                          mime:
                            type: string
                            description: The MIME type name
                          filename:
                            type: string
                            description: The file name
                        description: Document related information
                    description: A JSON object containing the document id object
              example:
                status: 200 OK
                details:
                  5f04778a-54f6-426a-b204-5573eb01e5da:
                    upload_date: 11/11/2019 18:03:07
                    ext: .pdf
                    size: 128012
                    mime: application/pdf
                    filename: test-11.pdf
                  b1902f56-ca7b-4ef4-8741-242dc211c037:
                    upload_date: 11/11/2019 18:03:12
                    ext: .pdf
                    size: 100337
                    mime: application/pdf
                    filename: test.pdf
      x-codeSamples:
      - lang: curl
        source: |
          curl -i -X GET \
            https://one-shot.developers.uanataca.com/api/v1/documents/29571
      - lang: Python
        source: |
          import requests

          url = "https://one-shot.developers.uanataca.com/api/v1/documents/29571"

          response = requests.get(url)

          data = response.json()
          print(data)
      - lang: Node.js
        source: |
          const fetch = require('node-fetch');

          const resp = await fetch(
            'https://one-shot.developers.uanataca.com/api/v1/documents/29571',
            {method: 'GET'}
          );

          const data = await resp.text();
          console.log(data);
      - lang: C#
        source: |
          using System;
          using System.Net.Http;
          using System.Threading.Tasks;

          public class Program
          {
            public static async Task Main(string[] args)
            {
              using (var client = new HttpClient())
              {
                var request = await client.GetAsync("https://one-shot.developers.uanataca.com/api/v1/documents/29571");
                var response = await request.Content.ReadAsStringAsync();

                Console.WriteLine(response);
              }
            }
          }
    delete:
      tags:
      - Documents
      summary: DELETE ALL DOCUMENTS
      description: Deletes all documents associated to a specific request.
      parameters:
      - name: pk
        in: path
        description: The request unique identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status id
                  details:
                    type: string
                    description: Successful document list deletion confirmation message
              example:
                status: 200 OK
                details: Documents deleted successfully
      x-codeSamples:
      - lang: curl
        source: |
          curl -i -X DELETE \
            https://one-shot.developers.uanataca.com/api/v1/documents/29571
      - lang: Python
        source: |
          import requests

          url = "https://one-shot.developers.uanataca.com/api/v1/documents/29571"

          response = requests.delete(url)

          data = response.json()
          print(data)
      - lang: Node.js
        source: |
          const fetch = require('node-fetch');

          const resp = await fetch(
            'https://one-shot.developers.uanataca.com/api/v1/documents/29571',
            {method: 'DELETE'}
          );

          const data = await resp.text();
          console.log(data);
      - lang: C#
        source: |
          using System;
          using System.Net.Http;
          using System.Threading.Tasks;

          public class Program
          {
            public static async Task Main(string[] args)
            {
              using (var client = new HttpClient())
              {
                var request = await client.DeleteAsync("https://one-shot.developers.uanataca.com/api/v1/documents/29571");
                var response = await request.Content.ReadAsStringAsync();

                Console.WriteLine(response);
              }
            }
          }
  /api/v1/document/{pk}/contract:
    get:
      tags:
      - Documents
      summary: RETRIEVE CONTRACT
      description: Retrieve the service contract regarding the user's digital certificate
        issuing.
      parameters:
      - name: pk
        in: path
        description: The request unique identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful Response
          content:
            text/plain:
              example: " %PDF-1.7\n %����\n 1 0 obj\n <</Type/Catalog/Pages 2 0 R/Lang(es-ES)\
                \ /StructTreeRoot 10 0 R/MarkInfo<</Marked true>>/Metadata 26 0 R/ViewerPreferences\
                \ 27 0 R>>\n endobj\n\n\n2 0 obj\n <</Type/Pages/Count 1/Kids[ 3 0\
                \ R] >>\n endobj\n\n\n3 0 obj\n <</Type/Page/Parent 2 0 R/Resources<</Font<</F1\
                \ 5 0 R>>/ExtGState<</GS7 7 0 R/GS8 8 0 R>>/ProcSet[/PDF/Text/ImageB/ImageC/ImageI]\
                \ >>/MediaBox[ 0 0 595.32 841.92] /Contents 4 0 R/Group<</Type/Group/S/Transparency/CS/DeviceRGB>>/Tabs/S/StructParents\
                \ 0>>\n endobj\n (...)\n "
      x-codeSamples:
      - lang: curl
        source: |
          curl -i -X GET \
            https://one-shot.developers.uanataca.com/api/v1/document/29571/contract
      - lang: Python
        source: |
          import requests

          url = "https://one-shot.developers.uanataca.com/api/v1/document/29571/contract"

          response = requests.get(url)

          data = response.json()
          print(data)
      - lang: Node.js
        source: |
          const fetch = require('node-fetch');

          const resp = await fetch(
            'https://one-shot.developers.uanataca.com/api/v1/document/29571/contract',
            {method: 'GET'}
          );

          const data = await resp.text();
          console.log(data);
      - lang: C#
        source: |
          using System;
          using System.Net.Http;
          using System.Threading.Tasks;

          public class Program
          {
            public static async Task Main(string[] args)
            {
              using (var client = new HttpClient())
              {
                var request = await client.GetAsync("https://one-shot.developers.uanataca.com/api/v1/document/29571/contract");
                var response = await request.Content.ReadAsStringAsync();

                Console.WriteLine(response);
              }
            }
          }
  /api/v1/image:
    post:
      tags:
      - Images
      summary: UPLOAD IMAGE
      description: Uploads an image for using in a visual graphic signature.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  description: The image to add in the visual graphic signature in PNG format
                  type: array
                  items:
                    type: string
                    format: binary
        required: true
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status id
                  details:
                    type: string
                    description: The uploaded image id
              example:
                status: 200 OK
                details: bfd74f73-7b22-40a6-ad37-6fc867263309
      x-codeSamples:
      - lang: curl
        source: |
          curl -i -X POST \
            https://one-shot.developers.uanataca.com/api/v1/image \
            -H 'Content-Type: multipart/form-data' \
            -F image=@sample_folder/image.png
      - lang: Python
        source: |
          import requests

          url = "https://one-shot.developers.uanataca.com/api/v1/image"

          payload={}
          files=[
            ('image',('image.png',open('sample_folder/image.png','rb'),'application/pdf'))
          ]

          headers = {"Content-Type": "multipart/form-data"}

          response = requests.request("POST", url, headers=headers, data=payload, files=files)

          print(response.text)
      - lang: Node.js
        source: |
          import fetch from "node-fetch";
          import FormData from "form-data";
          import fs from "fs";

          var formData = new FormData();

          formData.append('image', fs.createReadStream('sample_folder/document.pdf'));

          var url = 'https://one-shot.developers.uanataca.com/api/v1/images';

          var options = {
            method: 'POST',
            body: formData,
            redirect: 'follow'
          };

          options.body = formData;

          fetch(url, options)
            .then(res => res.json())
            .then(json => console.log(json))
            .catch(err => console.error('error:' + err));
      - lang: 'C#'
        source: |
                using System;
                using System.Threading.Tasks;
                using RestSharp;

                public class Program
                {
                  public static Task Main(string[] args)
                    {
                        var client = new RestClient("https://one-shot.developers.uanataca.com/api/v1/images");
                        client.Timeout = -1;

                        string imgPath = "./path_to_img/image.png"; // path to image

                        var request = new RestRequest(Method.POST);
                        request.AlwaysMultipartFormData = true;
                        request.AddHeader("content-type", "multipart/form-data");
                        request.AddFile("image", imgPath, "image/png");

                        IRestResponse response = client.Execute(request);

                        Console.WriteLine(response.Content);
                        return Task.CompletedTask;
                    }
                }
  /api/v1/image/{uid}:
    get:
      tags:
      - Images
      summary: RETRIEVE IMAGE
      description: Retrieves a previously uploaded image.
      parameters:
      - name: uid
        in: path
        description: The image unique identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful Response
          content:
            text/png:
              example: The retrieved image in png format
      x-codeSamples:
      - lang: curl
        source: |
          curl -i -X GET \
            https://one-shot.developers.uanataca.com/api/v1/image/bfd74f73-7b22-40a6-ad37-6fc867263309
      - lang: Python
        source: |
          import requests

          url = "https://one-shot.developers.uanataca.com/api/v1/image/bfd74f73-7b22-40a6-ad37-6fc867263309"

          response = requests.get(url)

          data = response.json()
          print(data)
      - lang: Node.js
        source: |
          const fetch = require('node-fetch');

          const resp = await fetch(
            'https://one-shot.developers.uanataca.com/api/v1/image/bfd74f73-7b22-40a6-ad37-6fc867263309',
            {method: 'GET'}
          );

          const data = await resp.text();
          console.log(data);
      - lang: C#
        source: |
          using System;
          using System.Net.Http;
          using System.Threading.Tasks;

          public class Program
          {
            public static async Task Main(string[] args)
            {
              using (var client = new HttpClient())
              {
                var request = await client.GetAsync("https://one-shot.developers.uanataca.com/api/v1/image/bfd74f73-7b22-40a6-ad37-6fc867263309");
                var response = await request.Content.ReadAsStringAsync();

                Console.WriteLine(response);
              }
            }
          }   
    delete:
      tags:
      - Images
      summary: DELETE IMAGE
      description: Deletes a previously uploaded image.
      parameters:
      - name: uid
        in: path
        description: The image unique identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status id
                  details:
                    type: string
                    description: The successful image deletion confirmation message
              example:
                status: 200 OK
                details: Image deleted
      x-codeSamples:
      - lang: curl
        source: |
          curl -i -X DELETE \
            https://one-shot.developers.uanataca.com/api/v1/image/bfd74f73-7b22-40a6-ad37-6fc867263309
      - lang: Python
        source: |
          import requests

          url = "https://one-shot.developers.uanataca.com/api/v1/image/bfd74f73-7b22-40a6-ad37-6fc867263309"

          response = requests.get(url)

          data = response.json()
          print(data)
      - lang: Node.js
        source: |
          const fetch = require('node-fetch');

          const resp = await fetch(
            'https://one-shot.developers.uanataca.com/api/v1/image/bfd74f73-7b22-40a6-ad37-6fc867263309',
            {method: 'DELETE'}
          );

          const data = await resp.text();
          console.log(data);
      - lang: C#
        source: |
          using System;
          using System.Net.Http;
          using System.Threading.Tasks;

          public class Program
          {
            public static async Task Main(string[] args)
            {
              using (var client = new HttpClient())
              {
                var request = await client.DeleteAsync("https://one-shot.developers.uanataca.com/api/v1/image/bfd74f73-7b22-40a6-ad37-6fc867263309");
                var response = await request.Content.ReadAsStringAsync();

                Console.WriteLine(response);
              }
            }
          }
  /api/v1/images:
    get:
      tags:
      - Images
      summary: LIST IMAGES
      description: Lists all uploaded images.
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status id
                  details:
                    type: object
                    properties:
                      imgid:
                        type: object
                        properties:
                          upload_date:
                            type: string
                            description: The image upload date
                          ext:
                            type: string
                            description: The file extension
                          size:
                            type: string
                            description: The file size in bytes
                          mime:
                            type: string
                            description: The MIME type name
                          filename:
                            type: string
                            description: The file name
                        description: Image related information
                    description: A JSON object containing the image id object
              example:
                status: 200 OK
                details:
                  2d845d2c-c94f-47f0-b9ad-6275d294bb25:
                    upload_date: 2021-06-02 02:12:16.369317
                    ext: .png
                    size:
                    - 1920
                    - 1080
                    mime: image/png
                    filename: tmprubric-4499623105711609371.png
                  33a1886f-3546-46b4-b981-031cdf7ba9ff:
                    upload_date: 2021-06-03 15:18:20.671054
                    ext: .png
                    size:
                    - 600
                    - 600
                    mime: image/png
                    filename: tmprubric-4873527110174301865.png
    delete:
      tags:
      - Images
      summary: DELETE ALL IMAGES
      description: Deletes all uploaded images.
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status id
                  details:
                    type: string
                    description: The successful image list deletion confirmation message
              example:
                status: 200 OK
                details: Images deleted successfully
      x-codeSamples:
      - lang: curl
        source: |
          curl -i -X DELETE \
            https://one-shot.developers.uanataca.com/api/v1/images
      - lang: Python
        source: |
          import requests

          url = "https://one-shot.developers.uanataca.com/api/v1/images"

          response = requests.delete(url)

          data = response.json()
          print(data)
      - lang: Node.js
        source: |
          const fetch = require('node-fetch');

          const resp = await fetch(
            'https://one-shot.developers.uanataca.com/api/v1/images',
            {method: 'DELETE'}
          );

          const data = await resp.text();
          console.log(data);
      - lang: C#
        source: |
          using System;
          using System.Net.Http;
          using System.Threading.Tasks;

          public class Program
          {
            public static async Task Main(string[] args)
            {
              using (var client = new HttpClient())
              {
                var request = await client.DeleteAsync("https://one-shot.developers.uanataca.com/api/v1/images");
                var response = await request.Content.ReadAsStringAsync();

                Console.WriteLine(response);
              }
            }
          }
    x-codeSamples:
    - lang: curl
      source: |
        curl -i -X GET \
          https://one-shot.developers.uanataca.com/api/v1/images
    - lang: Python
      source: |
        import requests

        url = "https://one-shot.developers.uanataca.com/api/v1/images"

        response = requests.get(url)

        data = response.json()
        print(data)
    - lang: Node.js
      source: |
        const fetch = require('node-fetch');

        const resp = await fetch(
          'https://one-shot.developers.uanataca.com/api/v1/images',
          {method: 'GET'}
        );

        const data = await resp.text();
        console.log(data);
    - lang: C#
      source: |
        using System;
        using System.Net.Http;
        using System.Threading.Tasks;

        public class Program
        {
          public static async Task Main(string[] args)
          {
            using (var client = new HttpClient())
            {
              var request = await client.GetAsync("https://one-shot.developers.uanataca.com/api/v1/images");
              var response = await request.Content.ReadAsStringAsync();

              Console.WriteLine(response);
            }
          }
        }
  /api/v1/videoid/{request_pk}/validate:
    post:
      tags:
      - Video ID
      summary: VALIDATE REQUEST
      description: Validation of a Video ID Request
      parameters:
      - name: request_pk
        in: path
        description: The Request unique identifier
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateReqObject_VID'
        required: false
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Successful response code
                  details:
                    type: object
                    properties: {}
                    description: Successful response message
              example:
                status: 200 OK
                details: Videoid validated
        400:
          description: Invalid JSON
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
                    description: Response error message
                  description:
                    type: string
                    description: Message description
              example:
                title: Invalid JSON
                description: 'Could not parse JSON body - Expecting '','' delimiter:
                  line 5 column 11 (char 205)'
        403:
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Response error message
                  details:
                    type: string
                    description: Message description
              example:
                status: 403 Forbidden
                details: Invalid RAO credentials
        500:
          description: Missing required parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status id
                  details:
                    type: string
                    description: The response status message
              example:
                status: 500 Internal Server Error
                details: 'Error during Videoid validation: {"code": "500", "id": "d6f30c831f827d9e",
                  "error": "Rao matching query does not exist."}'
      x-codeSamples:
      - lang: curl
        source: |
          curl -i -X POST \
            https://one-shot.developers.uanataca.com/api/v1/videoid/45836/validate \
            -H 'Content-Type: application/json' \
            -d '{
              "token": "6d1cae4d55be4cdf9cac50ee36f73406",
              "username": "9001800",
              "password": "Gy6F37xK",
              "pin": "belorado74",
              "rao_id": "1400"
            }'
      - lang: Python
        source: |
          import requests

          url = "https://one-shot.developers.uanataca.com/api/v1/videoid/45836/validate"

          payload = {
            "token": "6d1cae4d55be4cdf9cac50ee36f73406",
            "username": "9001800",
            "password": "Gy6F37xK",
            "pin": "belorado74",
            "rao_id": "1400"
          }

          headers = {"Content-Type": "application/json"}

          response = requests.post(url, json=payload, headers=headers)

          data = response.json()
          print(data)
      - lang: Node.js
        source: |
          const fetch = require('node-fetch');

          const resp = await fetch(
            `https://one-shot.developers.uanataca.com/api/v1/videoid/45836/validate`,
            {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                token: '6d1cae4d55be4cdf9cac50ee36f73406',
                username: '5012345',
                password: 'Gy6F37xK',
                pin: 'belorado74',
                rao_id: '1400'
              })
            }
          );

          const data = await resp.json();
          console.log(data);
      - lang: C#
        source: |
          using System;
          using System.Net.Http;
          using System.Threading.Tasks;
          using System.Text;
          using Newtonsoft.Json.Linq;

          public class Program
          {
            public static async Task Main(string[] args)
            {
              using (var client = new HttpClient())
              {
                JObject json = JObject.Parse(@"{
                  token: '6d1cae4d55be4cdf9cac50ee36f73406',
                  username: '5012345',
                  password: 'Gy6F37xK',
                  pin: 'belorado74',
                  rao_id: '1400'
                }");
                var postData = new StringContent(json.ToString(), Encoding.UTF8, "application/json");
                var request = await client.PostAsync("https://one-shot.developers.uanataca.com/api/v1/videoid/45836/validate", postData);
                var response = await request.Content.ReadAsStringAsync();

                Console.WriteLine(response);
              }
            }
          }
      x-codegen-request-body-name: body
  /api/v1/videoid/{request_pk}/refuse:
    post:
      tags:
      - Video ID
      summary: REFUSE REQUEST
      description: Refuse validation for a Video ID Request
      parameters:
      - name: request_pk
        in: path
        description: The Request unique identifier
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefuseReqObject_VID'
        required: false
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Successful response code
                  details:
                    type: object
                    properties: {}
                    description: Successful response message
              example:
                status: 200 OK
                details: Videoid refuse completed
        400:
          description: Invalid JSON | Missing required parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
                    description: Response error message
                  description:
                    type: string
                    description: Message description
              example:
                title: Invalid JSON
                description: 'Could not parse JSON body - Expecting '','' delimiter:
                  line 5 column 11 (char 205)'
        403:
          description: Invalid RAO credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Response error message
                  details:
                    type: string
                    description: Message description
              example:
                status: 403 Forbidden
                details: Invalid RAO credentials
        500:
          description: Missing required parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status id
                  details:
                    type: string
                    description: The response status message
              example:
                status: 500 Internal Server Error
                details: 'Error during Videoid validation: {"code": "500", "id": "d6f30c831f827d9e",
                  "error": "Rao matching query does not exist."}'
      x-codeSamples:
      - lang: curl
        source: |
          curl -i -X POST \
            https://one-shot.developers.uanataca.com/api/v1/videoid/45836/refuse \
            -H 'Content-Type: application/json' \
            -d '{
              "token": "6d1cae4d55be4cdf9cac50ee36f73406",
              "username": "9001800",
              "password": "Gy6F37xK",
              "pin": "belorado74",
              "rao_id": "1400",
              "reason": "Expired document"
            }'
      - lang: Python
        source: |
          import requests

          url = "https://one-shot.developers.uanataca.com/api/v1/requests/45836/refuse"

          payload = {
            "token": "6d1cae4d55be4cdf9cac50ee36f73406",
            "username": "9001800",
            "password": "Gy6F37xK",
            "pin": "belorado74",
            "rao_id": "1400",
            "reason": "Expired document"
          }

          headers = {"Content-Type": "application/json"}

          response = requests.post(url, json=payload, headers=headers)

          data = response.json()
          print(data)
      - lang: Node.js
        source: |
          const fetch = require('node-fetch');

          const resp = await fetch(
            `https://one-shot.developers.uanataca.com/api/v1/requests/45836/refuse`,
            {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                token: '6d1cae4d55be4cdf9cac50ee36f73406',
                username: '5012345',
                password: 'Gy6F37xK',
                pin: 'belorado74',
                rao_id: '1400',
                reason: 'Expired document'
              })
            }
          );

          const data = await resp.json();
          console.log(data);
      - lang: C#
        source: |
          using System;
          using System.Net.Http;
          using System.Threading.Tasks;
          using System.Text;
          using Newtonsoft.Json.Linq;

          public class Program
          {
            public static async Task Main(string[] args)
            {
              using (var client = new HttpClient())
              {
                JObject json = JObject.Parse(@"{
                  token: '6d1cae4d55be4cdf9cac50ee36f73406',
                  username: '5012345',
                  password: 'Gy6F37xK',
                  pin: 'belorado74',
                  rao_id: '1400',
                  reason: 'Expired document'
                }");
                var postData = new StringContent(json.ToString(), Encoding.UTF8, "application/json");
                var request = await client.PostAsync("https://one-shot.developers.uanataca.com/api/v1/requests/45836/refuse", postData);
                var response = await request.Content.ReadAsStringAsync();

                Console.WriteLine(response);
              }
            }
          }
      x-codegen-request-body-name: body
  /api/v1/requests/{request_pk}/approve:
    post:
      tags:
      - Video ID
      summary: APPROVE REQUEST
      description: Approval of a request by a RAO. At this moment the RAO will sign
        the receipt and the contract.
      parameters:
      - name: request_pk
        in: path
        description: The Request unique identifier
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlApproveReqObject'
        required: false
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Successful response code
                  details:
                    type: object
                    properties: {}
                    description: Successful response message
              example:
                status: 200 OK
                details: Request approved successfully
        400:
          description: Invalid JSON | Missing required parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
                    description: Response error message
                  description:
                    type: string
                    description: Message description
              example:
                status: 400 Bad Request
                details: 'Missing required parameters: incomplete RAO''s credentials'
        403:
          description: Invalid RAO credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Response error message
                  details:
                    type: string
                    description: Message description
              example:
                status: 403 Forbidden
                details: Invalid RAO credentials
        500:
          description: Missing required parameters | Invalid Request pk
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: The response status id
                  details:
                    type: string
                    description: The response status message
              example:
                status: 500 Internal Server Error
                details: 'Cannot approve Request 46391: Invalid request fields: serial_number;
                  surname_1; mobile_phone_number; given_name'
      x-codeSamples:
      - lang: curl
        source: |
          curl -i -X POST \
            https://one-shot.developers.uanataca.com/api/v1/request/45836/approve/ \
            -H 'Content-Type: application/json' \
            -d '{
              "token": "6d1cae4d55be4cdf9cac50ee36f73406",
              "username": "9001800",
              "password": "Gy6F89xK",
              "pin": "belorado74",
              "rao": "898"
            }'
      - lang: Python
        source: |
          import requests

          url = "https://one-shot.developers.uanataca.com/api/v1/request/45836/approve/"

          payload = {
            "token": "6d1cae4d55be4cdf9cac50ee36f73406",
            "username": "9001800",
            "password": "Gy6F89xK",
            "pin": "belorado74",
            "rao": "898"
          }

          headers = {"Content-Type": "application/json"}

          response = requests.post(url, json=payload, headers=headers)

          data = response.json()
          print(data)
      - lang: Node.js
        source: |
          const fetch = require('node-fetch');

          const resp = await fetch(
            'https://one-shot.developers.uanataca.com/api/v1/request/45836/approve/',
            {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                token: '6d1cae4d55be4cdf9cac50ee36f73406',
                username: 'RAO_Name',
                password: 'Gy6F89xK',
                pin: 'belorado74',
                rao: '898'
              })
            }
          );

          const data = await resp.json();
          console.log(data);
      - lang: C#
        source: |
          using System;
          using System.Net.Http;
          using System.Threading.Tasks;
          using System.Text;
          using Newtonsoft.Json.Linq;
          using System.Security.Cryptography.X509Certificates;

          public class Program
          {
            public static async Task Main(string[] args)
            {
              X509Certificate2 clientCert = new X509Certificate2("./path/to/cert_and_key.p12", "password"); 
              HttpClientHandler handler = new HttpClientHandler();

              // This disables the SSL verification in TEST mode
              handler.ServerCertificateCustomValidationCallback = (message, cert, chain, sslPolicyErrors) =>
              {
                  return true;
              };
              
              handler.ClientCertificates.Add(clientCert);
              
              using (var client = new HttpClient(handler))
              {
                JObject json = JObject.Parse(@"{
                  token: '6d1cae4d55be4cdf9cac50ee36f73406',
                  username: 'RAO_Name',
                  password: 'Gy6F89xK',
                  pin: 'belorado74',
                  rao: '898'
                }");
                var postData = new StringContent(json.ToString(), Encoding.UTF8, "application/json");
                var request = await client.PostAsync("https://one-shot.developers.uanataca.com/api/v1/request/45836/approve/", postData);
                var response = await request.Content.ReadAsStringAsync();

                Console.WriteLine(response);
              }
            }
          }
      x-codegen-request-body-name: body
  /api/v1/videoid/{request_pk}/download/video:
    get:
      tags:
      - Video ID
      summary: DOWNLOAD VIDEO
      description: Download the video file associated to a Request
      parameters:
      - name: request_pk
        in: path
        description: The video unique identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful Response
          content: {}
        400:
          description: Invalid Request pk
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
                    description: Response error message
                  description:
                    type: string
                    description: Message description
              example:
                title: 404 Not Found
                description: Request not found
      x-codeSamples:
      - lang: curl
        source: |
          curl -i -X GET \
            https://one-shot.developers.uanataca.com/api/v1/videoid/45836/download/video
      - lang: Python
        source: |
          import requests

          url = "https://one-shot.developers.uanataca.com/api/v1/videoid/45836/download/video"

          response = requests.get(url)

          data = response.json()
          print(data)
      - lang: Node.js
        source: |
          const fetch = require('node-fetch');

          const resp = await fetch(
            `https://one-shot.developers.uanataca.com/api/v1/videoid/45836/download/video`,
            {method: 'GET'}
          );

          const data = await resp.text();
          console.log(data);
      - lang: C#
        source: | 
          using System;
          using System.Net.Http;
          using System.Threading.Tasks;

          public class Program
          {
            public static async Task Main(string[] args)
            {
              using (var client = new HttpClient())
              {
                var request = await client.GetAsync("https://one-shot.developers.uanataca.com/api/v1/videoid/45836/download/video", null);
                var response = await request.Content.ReadAsStringAsync();

                Console.WriteLine(response);
              }
            }
          } 
components:
  schemas:
    SettingsObject:
      type: object
      properties:
        tsa:
          type: object
          properties:
            tsa_url:
              type: string
              description: The default Timestamp Authority URL
          description: Timestamp Authority Settings
        request:
          type: object
          properties:
            default_profile:
              type: string
              description: The default certificate profile
            default_ra:
              type: string
              description: The default Registration Authority id
          description: Request Settings
        billing:
          type: object
          properties:
            billing_username:
              type: string
              description: The default client billing username
            billing_password:
              type: string
              description: The default client billing password
          description: Billing Settings
        general:
          type: object
          properties:
            environment:
              type: string
              description: The API work environment
              enum:
              - test
              - prod
          description: General Settings
    MetadataObject:
      required:
      - metadata
      - metadata_oid
      type: object
      properties:
        metadata:
          type: string
          description: The metadata information previously converted into Base64 format
        metadata_oid:
          type: string
          description: The metadata associated OID
    TokenObject:
      required:
      - env
      - username
      type: object
      properties:
        username:
          type: string
          description: The RAO's digital identity username
        password:
          type: string
          description: The RAO's digital identity password. **If not included in this
            call, must be included in calls that require RAO's credentials**
        pin:
          type: string
          description: The RAO's digital identity PIN. **If not included in this call,
            must be included in calls that require RAO's credentials**
        env:
          type: string
          description: 'The API work environment. </br> <blockquote style=''background-color:
            #faf3ac; border-color: #5a5a5a; color: #3b3b3b;''><b>⚠ Required only if
            not set at settings.ini file. Check <a href=''#tag/Settings/paths/~1api~1v1~1settings/post''>Update
            Settings</a> call.</b></blockquote>'
          enum:
          - test
          - prod
    SignObject:
      required:
      - secret
      type: object
      properties:
        secret:
          type: string
          description: The OTP code sent to the user.<br> For external authenticacion
            method, a customer code is provided.
        use_signature_text:
          type: boolean
          description: 'This parameter disables the signature image text (Default: true)'
        metadata:
          type: string
          description: The metadata unique id code obtained from <a href='#tag/Metadata/paths/~1api~1v1~1metadata/post'>
            Upload Metadata </a> call.
        ext_unlock_type:
          type: string
          description: The external authentication method type. This field is required
            for requests using external authenticacion methods.
        ext_unlock_value:
          type: string
          description: The id of the external authentication request. This field is
            required for requests using external authenticacion methods.
        options:
          type: object
          properties:
            position:
              type: string
              description: The coordinates in points (pt) for signature image position
                and size, starting from bottom left corner (x1,y1,x2,y2).<br> 1px
                = 0.75pt
            page:
              type: number
              description: The document page where the signature will be placed. The
                first page starts at `0`
            image:
              type: string
              description: The previously uploaded image id
          description: Visual graphic signature properties.<br> **It is required prior
            to image upload.** See <a href='#tag/Images'>images</a> api reference
            <br>
    CreateReqObject_VID:
      required:
      - billing_password
      - billing_username
      - email
      - env
      - mobile_phone_number
      - profile
      type: object
      properties:
        mobile_phone_number:
          type: string
          description: The signer's mobile phone number
        email:
          type: string
          description: The signer's email
        registration_authority:
          type: string
          description: 'The Registration Authority ID number </br> <blockquote style=''background-color:
            #faf3ac; border-color: #5a5a5a; color: #3b3b3b;''><b>⚠ Required only if
            not set at settings.ini file. Check <a href=''#tag/Settings/paths/~1api~1v1~1settings/post''>Update
            Settings</a> call.</b></blockquote>'
        profile:
          type: string
          description: 'The certificate profile </br> <blockquote style=''background-color:
            #faf3ac; border-color: #5a5a5a; color: #3b3b3b;''><b>⚠ Required only if
            not set at settings.ini file. Check <a href=''#tag/Settings/paths/~1api~1v1~1settings/post''>Update
            Settings</a> call.</b></blockquote>'
        billing_username:
          type: string
          description: 'The client billing username. </br> <blockquote style=''background-color:
            #faf3ac; border-color: #5a5a5a; color: #3b3b3b;''><b>⚠ Required only if
            not set at settings.ini file. Check <a href=''#tag/Settings/paths/~1api~1v1~1settings/post''>Update
            Settings</a> call.</b></blockquote>'
        billing_password:
          type: string
          description: 'The client billing password in Base64 format. </br> <blockquote
            style=''background-color: #faf3ac; border-color: #5a5a5a; color: #3b3b3b;''><b>⚠
            Required only if not set at settings.ini file. Check <a href=''#tag/Settings/paths/~1api~1v1~1settings/post''>Update
            Settings</a> call.</b></blockquote>'
        webhook_url:
          type: string
          description: 'The webhook URL. </br> <blockquote style=''background-color:
            #faf3ac; border-color: #5a5a5a; color: #3b3b3b;''><b>⚠ Not required for
            external authentication. See <a href=''#section/Webhook-Configuration''>Webhook
            Configuration</a> section</b></blockquote>'
        env:
          type: string
          description: 'The API work environment. </br> <blockquote style=''background-color:
            #faf3ac; border-color: #5a5a5a; color: #3b3b3b;''><b>⚠ Required only if
            not set at settings.ini file. Check <a href=''#tag/Settings/paths/~1api~1v1~1settings/post''>Update
            Settings</a> call.</b></blockquote>'
          enum:
          - test
          - prod
    UpdateReqObject_VID:
      required:
      - country_name
      - email
      - profile
      - registration_authority
      - scratchcard
      type: object
      properties:
        scratchcard:
          type: string
          description: 'The request scratchcard id. </br> <blockquote style=''background-color:
            #faf3ac; border-color: #5a5a5a; color: #3b3b3b;''><b>⚠ The scratchcard
            id can be found as a field of the object <b>details</b> when executing
            <a href=''#tag/Requests/paths/~1api~1v1~1request~1{request_pk}/get''>Get
            Request</a> call.</b></blockquote>'
        given_name:
          type: string
          description: The signer's given name
        surname_1:
          type: string
          description: The signer's first surname
        surname_2:
          type: string
          description: The signer's second surname
        birth_date:
          type: string
          description: The signer's birth date
        email:
          type: string
          description: The signer's email
        mobile_phone_number:
          type: string
          description: The signer's mobile phone number
        serial_number:
          type: string
          description: The signer's document ID number
        registration_authority:
          type: string
          description: The Registration Authority id number
        profile:
          type: string
          description: The certificate profile
        country_name:
          type: string
          description: The user's id document country two-letters code (ISO 3166-1
            alpha-2)
    UploadData_VID:
      type: object
      properties:
        acceptance:
          type: object
          properties:
            description:
              type: string
              description: Terms and Conditions descriptive text
            url-doc-privacypolicy:
              type: string
              description: Privacy policy document URL
            ip:
              type: string
              description: The local IP adress
            url-web-videoid:
              type: string
              description: Video ID platform access URL
            user-agent:
              type: string
              description: A user agent (e.g. web browser)
            date:
              type: string
              description: The current date
            url-doc-termsconditions:
              type: string
              description: Terms and conditions document URL
          description: 'A set of acceptance parameters. </br> <blockquote style=''background-color:
            #faf3ac; border-color: #5a5a5a; color: #3b3b3b;''><b>⚠ Customizable object
            for external authentication.</b></blockquote>'
        videoid_data:
          type: object
          properties:
            images:
              type: object
              properties:
                document_front:
                  type: string
                  description: Base64 document front image
                document_rear:
                  type: string
                  description: Base64 document rear image
                document_photo:
                  type: string
                  description: Base64 document client picture (extracted from document)
                document_owner:
                  type: string
                  description: Base64 client selfie
              description: Document images
            ocr_data:
              required:
                - given_name
                - surname_1
                - serial_number
              type: object
              properties:
                given_name:
                  type: string
                  description: The user's given name
                surname_1:
                  type: string
                  description: The user's first surname
                surname_2:
                  type: string
                  description: The user's second surname
                mobile_phone_number:
                  type: string
                  description: The user's mobile phone number
                email:
                  type: string
                  description: The user's email
                serial_number:
                  type: string
                  description: The user's document serial number
                id_document_type:
                  type: string
                  description: "Document types allowed for user identification: \n\
                    \ - **IDC** - Identification based on national identity card number\
                    \ \n - **PAS** - Identification based on passport number \n -\
                    \ **PNO** - Identification based on national personal number (national\
                    \ civic registration number) \n - **TIN** - Tax Identification\
                    \ Number according to the European Commission"
                  enum:
                  - IDC
                  - PAS
                  - PNO
                  - TIN
                id_document_country:
                  type: string
                  description: The user's id document country two-letters code (ISO
                    3166-1 alpha-2)
              description: 'Optical Character Recognition result <blockquote style=''background-color:
                #faf3ac; border-color: #5a5a5a; color: #3b3b3b;''><b>⚠ Customizable
                object for external authentication.</b></blockquote>'
            security_checks:
              type: object
              properties:
                otp_validation:
                  type: boolean
                  description: OTP code validation check
                documents_match:
                  type: boolean
                  description: Documents matching official registers check
                data_integrity:
                  type: boolean
                  description: Document data is not corrupted check
                document_notcopy:
                  type: boolean
                  description: Document is not a copy check
                document_notexpired:
                  type: boolean
                  description: Document is not expired check
                document_notunderage:
                  type: boolean
                  description: The user is not underage check
                liveliness:
                  type: boolean
                  description: The user is real check
              description: 'Security checks related to document integrity <blockquote
                style=''background-color: #faf3ac; border-color: #5a5a5a; color: #3b3b3b;''><b>⚠
                Customizable object for external authentication.</b></blockquote>'
            similarity_level:
              type: integer
              description: Level of similarity between document picture and face selfie.
                Ranges in [0,100].
          description: 'Data to upload for Video ID <blockquote style=''background-color:
            #faf3ac; border-color: #5a5a5a; color: #3b3b3b;''><b>⚠ Customizable object
            for external authentication.</b></blockquote>'
    PlApproveReqObject:
      required:
      - password
      - pin
      - token
      - username
      type: object
      properties:
        token:
          type: string
          description: 'The token containing RAO''s credentials. </br> <blockquote
            style=''background-color: #faf3ac; border-color: #5a5a5a; color: #3b3b3b;''><b>⚠
            Not required when RAO''s credentials (username, password, pin) are included
            as fields in this call.</b></blockquote>'
        username:
          type: string
          description: 'The RAO''s username </br> <blockquote style=''background-color:
            #faf3ac; border-color: #5a5a5a; color: #3b3b3b;''><b>⚠ Not required when
            included in <a href=''#tag/Tokens/paths/~1api~1v1~1token/post''>token</a>.</b></blockquote>'
        password:
          type: string
          description: 'The RAO''s password </br> <blockquote style=''background-color:
            #faf3ac; border-color: #5a5a5a; color: #3b3b3b;''><b>⚠ Not required when
            included in <a href=''#tag/Tokens/paths/~1api~1v1~1token/post''>token</a>.</b></blockquote>'
        pin:
          type: string
          description: 'The RAO''s PIN </br> <blockquote style=''background-color:
            #faf3ac; border-color: #5a5a5a; color: #3b3b3b;''><b>⚠ Not required when
            included in <a href=''#tag/Tokens/paths/~1api~1v1~1token/post''>token</a>.</b></blockquote>'
        rao:
          type: string
          description: 'The RAO''s id </br> <blockquote style=''background-color:
            #faf3ac; border-color: #5a5a5a; color: #3b3b3b;''><b>⚠ Not required when
            included in <a href=''#tag/Tokens/paths/~1api~1v1~1token/post''>token</a>.</b></blockquote>'
    ValidateReqObject_VID:
      required:
      - password
      - pin
      - token
      - username
      type: object
      properties:
        token:
          type: string
          description: 'The token containing RAO''s credentials. </br> <blockquote
            style=''background-color: #faf3ac; border-color: #5a5a5a; color: #3b3b3b;''><b>⚠
            Not required when RAO''s credentials (username, password, pin) are included
            as fields in this call.</b></blockquote>'
        username:
          type: string
          description: 'The RAO''s username </br> <blockquote style=''background-color:
            #faf3ac; border-color: #5a5a5a; color: #3b3b3b;''><b>⚠ Not required when
            included in <a href=''#tag/Tokens/paths/~1api~1v1~1token/post''>token</a>.</b></blockquote>'
        password:
          type: string
          description: 'The RAO''s password </br> <blockquote style=''background-color:
            #faf3ac; border-color: #5a5a5a; color: #3b3b3b;''><b>⚠ Not required when
            included in <a href=''#tag/Tokens/paths/~1api~1v1~1token/post''>token</a>.</b></blockquote>'
        pin:
          type: string
          description: 'The RAO''s PIN </br> <blockquote style=''background-color:
            #faf3ac; border-color: #5a5a5a; color: #3b3b3b;''><b>⚠ Not required when
            included in <a href=''#tag/Tokens/paths/~1api~1v1~1token/post''>token</a>.</b></blockquote>'
        rao:
          type: string
          description: 'The RAO''s id </br> <blockquote style=''background-color:
            #faf3ac; border-color: #5a5a5a; color: #3b3b3b;''><b>⚠ Not required when
            included in <a href=''#tag/Tokens/paths/~1api~1v1~1token/post''>token</a>.</b></blockquote>'
    RefuseReqObject_VID:
      required:
      - password
      - pin
      - reason
      - token
      - username
      type: object
      properties:
        token:
          type: string
          description: 'The token containing RAO''s credentials. </br> <blockquote
            style=''background-color: #faf3ac; border-color: #5a5a5a; color: #3b3b3b;''><b>⚠
            Not required when RAO''s credentials (username, password, pin) are included
            as fields in this call.</b></blockquote>'
        username:
          type: string
          description: 'The RAO''s username </br> <blockquote style=''background-color:
            #faf3ac; border-color: #5a5a5a; color: #3b3b3b;''><b>⚠ Not required when
            included in <a href=''#tag/Tokens/paths/~1api~1v1~1token/post''>token</a>.</b></blockquote>'
        password:
          type: string
          description: 'The RAO''s password </br> <blockquote style=''background-color:
            #faf3ac; border-color: #5a5a5a; color: #3b3b3b;''><b>⚠ Not required when
            included in <a href=''#tag/Tokens/paths/~1api~1v1~1token/post''>token</a>.</b></blockquote>'
        pin:
          type: string
          description: 'The RAO''s PIN </br> <blockquote style=''background-color:
            #faf3ac; border-color: #5a5a5a; color: #3b3b3b;''><b>⚠ Not required when
            included in <a href=''#tag/Tokens/paths/~1api~1v1~1token/post''>token</a>.</b></blockquote>'
        rao:
          type: string
          description: 'The RAO''s id </br> <blockquote style=''background-color:
            #faf3ac; border-color: #5a5a5a; color: #3b3b3b;''><b>⚠ Not required when
            included in <a href=''#tag/Tokens/paths/~1api~1v1~1token/post''>token</a>.</b></blockquote>'
        reason:
          type: string
          description: Reason that caused Video ID refusal
x-tagGroups:
- name: API Reference
  tags:
  - Settings
  - Metadata
  - Tokens
  - Requests
  - Documents
  - Images
  - Video ID
